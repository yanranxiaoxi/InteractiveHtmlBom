# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# This file is generated by wxPython's PI generator.  Do not edit by hand.
#
# The *.pyi files are used by PyCharm and other development tools to provide
# more information, such as PEP 484 type hints, than it is able to glean from
# introspection of extension types and methods.  They are not intended to be
# imported, executed or used for any other purpose other than providing info
# to the tools. If you don't use use a tool that makes use of .pyi files then
# you can safely ignore this file.
#
# See: https://www.python.org/dev/peps/pep-0484/
#      https://www.jetbrains.com/help/pycharm/2016.1/type-hinting-in-pycharm.html
#
# Copyright: (c) 2020 by Total Control Software
# License:   wxWindows License
#---------------------------------------------------------------------------


"""
The :ref:`wx.stc.StyledTextCrtl` class provided by this module is a text widget
primarily intended for use as a syntax highlighting source code editor.  It is
based on the popular Scintilla widget.
"""
#-- begin-_stc --#

import wx
ID_ANY = wx.ID_ANY  # Needed for some parameter defaults in this module
STC_INVALID_POSITION = 0
STC_START = 0
STC_OPTIONAL_START = 0
STC_LEXER_START = 0
STC_WS_INVISIBLE = 0
STC_WS_VISIBLEALWAYS = 0
STC_WS_VISIBLEAFTERINDENT = 0
STC_WS_VISIBLEONLYININDENT = 0
STC_TD_LONGARROW = 0
STC_TD_STRIKEOUT = 0
STC_EOL_CRLF = 0
STC_EOL_CR = 0
STC_EOL_LF = 0
STC_CP_UTF8 = 0
STC_IME_WINDOWED = 0
STC_IME_INLINE = 0
STC_MARKER_MAX = 0
STC_MARK_CIRCLE = 0
STC_MARK_ROUNDRECT = 0
STC_MARK_ARROW = 0
STC_MARK_SMALLRECT = 0
STC_MARK_SHORTARROW = 0
STC_MARK_EMPTY = 0
STC_MARK_ARROWDOWN = 0
STC_MARK_MINUS = 0
STC_MARK_PLUS = 0
STC_MARK_VLINE = 0
STC_MARK_LCORNER = 0
STC_MARK_TCORNER = 0
STC_MARK_BOXPLUS = 0
STC_MARK_BOXPLUSCONNECTED = 0
STC_MARK_BOXMINUS = 0
STC_MARK_BOXMINUSCONNECTED = 0
STC_MARK_LCORNERCURVE = 0
STC_MARK_TCORNERCURVE = 0
STC_MARK_CIRCLEPLUS = 0
STC_MARK_CIRCLEPLUSCONNECTED = 0
STC_MARK_CIRCLEMINUS = 0
STC_MARK_CIRCLEMINUSCONNECTED = 0
STC_MARK_BACKGROUND = 0
STC_MARK_DOTDOTDOT = 0
STC_MARK_ARROWS = 0
STC_MARK_PIXMAP = 0
STC_MARK_FULLRECT = 0
STC_MARK_LEFTRECT = 0
STC_MARK_AVAILABLE = 0
STC_MARK_UNDERLINE = 0
STC_MARK_RGBAIMAGE = 0
STC_MARK_BOOKMARK = 0
STC_MARK_CHARACTER = 0
STC_MARKNUM_FOLDEREND = 0
STC_MARKNUM_FOLDEROPENMID = 0
STC_MARKNUM_FOLDERMIDTAIL = 0
STC_MARKNUM_FOLDERTAIL = 0
STC_MARKNUM_FOLDERSUB = 0
STC_MARKNUM_FOLDER = 0
STC_MARKNUM_FOLDEROPEN = 0
STC_MASK_FOLDERS = 0
STC_MAX_MARGIN = 0
STC_MARGIN_SYMBOL = 0
STC_MARGIN_NUMBER = 0
STC_MARGIN_BACK = 0
STC_MARGIN_FORE = 0
STC_MARGIN_TEXT = 0
STC_MARGIN_RTEXT = 0
STC_MARGIN_COLOUR = 0
STC_STYLE_DEFAULT = 0
STC_STYLE_LINENUMBER = 0
STC_STYLE_BRACELIGHT = 0
STC_STYLE_BRACEBAD = 0
STC_STYLE_CONTROLCHAR = 0
STC_STYLE_INDENTGUIDE = 0
STC_STYLE_CALLTIP = 0
STC_STYLE_FOLDDISPLAYTEXT = 0
STC_STYLE_LASTPREDEFINED = 0
STC_STYLE_MAX = 0
STC_CHARSET_ANSI = 0
STC_CHARSET_DEFAULT = 0
STC_CHARSET_BALTIC = 0
STC_CHARSET_CHINESEBIG5 = 0
STC_CHARSET_EASTEUROPE = 0
STC_CHARSET_GB2312 = 0
STC_CHARSET_GREEK = 0
STC_CHARSET_HANGUL = 0
STC_CHARSET_MAC = 0
STC_CHARSET_OEM = 0
STC_CHARSET_RUSSIAN = 0
STC_CHARSET_OEM866 = 0
STC_CHARSET_CYRILLIC = 0
STC_CHARSET_SHIFTJIS = 0
STC_CHARSET_SYMBOL = 0
STC_CHARSET_TURKISH = 0
STC_CHARSET_JOHAB = 0
STC_CHARSET_HEBREW = 0
STC_CHARSET_ARABIC = 0
STC_CHARSET_VIETNAMESE = 0
STC_CHARSET_THAI = 0
STC_CHARSET_8859_15 = 0
STC_CASE_MIXED = 0
STC_CASE_UPPER = 0
STC_CASE_LOWER = 0
STC_CASE_CAMEL = 0
STC_FONT_SIZE_MULTIPLIER = 0
STC_WEIGHT_NORMAL = 0
STC_WEIGHT_SEMIBOLD = 0
STC_WEIGHT_BOLD = 0
STC_INDIC_PLAIN = 0
STC_INDIC_SQUIGGLE = 0
STC_INDIC_TT = 0
STC_INDIC_DIAGONAL = 0
STC_INDIC_STRIKE = 0
STC_INDIC_HIDDEN = 0
STC_INDIC_BOX = 0
STC_INDIC_ROUNDBOX = 0
STC_INDIC_STRAIGHTBOX = 0
STC_INDIC_DASH = 0
STC_INDIC_DOTS = 0
STC_INDIC_SQUIGGLELOW = 0
STC_INDIC_DOTBOX = 0
STC_INDIC_SQUIGGLEPIXMAP = 0
STC_INDIC_COMPOSITIONTHICK = 0
STC_INDIC_COMPOSITIONTHIN = 0
STC_INDIC_FULLBOX = 0
STC_INDIC_TEXTFORE = 0
STC_INDIC_POINT = 0
STC_INDIC_POINTCHARACTER = 0
STC_INDIC_IME = 0
STC_INDIC_IME_MAX = 0
STC_INDIC_MAX = 0
STC_INDIC_CONTAINER = 0
STC_INDICVALUEBIT = 0
STC_INDICVALUEMASK = 0
STC_INDICFLAG_VALUEFORE = 0
STC_IV_NONE = 0
STC_IV_REAL = 0
STC_IV_LOOKFORWARD = 0
STC_IV_LOOKBOTH = 0
STC_PRINT_NORMAL = 0
STC_PRINT_INVERTLIGHT = 0
STC_PRINT_BLACKONWHITE = 0
STC_PRINT_COLOURONWHITE = 0
STC_PRINT_COLOURONWHITEDEFAULTBG = 0
STC_FIND_WHOLEWORD = 0
STC_FIND_MATCHCASE = 0
STC_FIND_WORDSTART = 0
STC_FIND_REGEXP = 0
STC_FIND_POSIX = 0
STC_FOLDLEVELBASE = 0
STC_FOLDLEVELWHITEFLAG = 0
STC_FOLDLEVELHEADERFLAG = 0
STC_FOLDLEVELNUMBERMASK = 0
STC_FOLDDISPLAYTEXT_HIDDEN = 0
STC_FOLDDISPLAYTEXT_STANDARD = 0
STC_FOLDDISPLAYTEXT_BOXED = 0
STC_FOLDACTION_CONTRACT = 0
STC_FOLDACTION_EXPAND = 0
STC_FOLDACTION_TOGGLE = 0
STC_AUTOMATICFOLD_SHOW = 0
STC_AUTOMATICFOLD_CLICK = 0
STC_AUTOMATICFOLD_CHANGE = 0
STC_FOLDFLAG_LINEBEFORE_EXPANDED = 0
STC_FOLDFLAG_LINEBEFORE_CONTRACTED = 0
STC_FOLDFLAG_LINEAFTER_EXPANDED = 0
STC_FOLDFLAG_LINEAFTER_CONTRACTED = 0
STC_FOLDFLAG_LEVELNUMBERS = 0
STC_FOLDFLAG_LINESTATE = 0
STC_TIME_FOREVER = 0
STC_IDLESTYLING_NONE = 0
STC_IDLESTYLING_TOVISIBLE = 0
STC_IDLESTYLING_AFTERVISIBLE = 0
STC_IDLESTYLING_ALL = 0
STC_WRAP_NONE = 0
STC_WRAP_WORD = 0
STC_WRAP_CHAR = 0
STC_WRAP_WHITESPACE = 0
STC_WRAPVISUALFLAG_NONE = 0
STC_WRAPVISUALFLAG_END = 0
STC_WRAPVISUALFLAG_START = 0
STC_WRAPVISUALFLAG_MARGIN = 0
STC_WRAPVISUALFLAGLOC_DEFAULT = 0
STC_WRAPVISUALFLAGLOC_END_BY_TEXT = 0
STC_WRAPVISUALFLAGLOC_START_BY_TEXT = 0
STC_WRAPINDENT_FIXED = 0
STC_WRAPINDENT_SAME = 0
STC_WRAPINDENT_INDENT = 0
STC_CACHE_NONE = 0
STC_CACHE_CARET = 0
STC_CACHE_PAGE = 0
STC_CACHE_DOCUMENT = 0
STC_PHASES_ONE = 0
STC_PHASES_TWO = 0
STC_PHASES_MULTIPLE = 0
STC_EFF_QUALITY_MASK = 0
STC_EFF_QUALITY_DEFAULT = 0
STC_EFF_QUALITY_NON_ANTIALIASED = 0
STC_EFF_QUALITY_ANTIALIASED = 0
STC_EFF_QUALITY_LCD_OPTIMIZED = 0
STC_MULTIPASTE_ONCE = 0
STC_MULTIPASTE_EACH = 0
STC_EDGE_NONE = 0
STC_EDGE_LINE = 0
STC_EDGE_BACKGROUND = 0
STC_EDGE_MULTILINE = 0
STC_POPUP_NEVER = 0
STC_POPUP_ALL = 0
STC_POPUP_TEXT = 0
STC_STATUS_OK = 0
STC_STATUS_FAILURE = 0
STC_STATUS_BADALLOC = 0
STC_STATUS_WARN_START = 0
STC_STATUS_WARN_REGEX = 0
STC_CURSORNORMAL = 0
STC_CURSORARROW = 0
STC_CURSORWAIT = 0
STC_CURSORREVERSEARROW = 0
STC_VISIBLE_SLOP = 0
STC_VISIBLE_STRICT = 0
STC_CARET_SLOP = 0
STC_CARET_STRICT = 0
STC_CARET_JUMPS = 0
STC_CARET_EVEN = 0
STC_SEL_STREAM = 0
STC_SEL_RECTANGLE = 0
STC_SEL_LINES = 0
STC_SEL_THIN = 0
STC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE = 0
STC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE = 0
STC_MULTIAUTOC_ONCE = 0
STC_MULTIAUTOC_EACH = 0
STC_ORDER_PRESORTED = 0
STC_ORDER_PERFORMSORT = 0
STC_ORDER_CUSTOM = 0
STC_CARETSTICKY_OFF = 0
STC_CARETSTICKY_ON = 0
STC_CARETSTICKY_WHITESPACE = 0
STC_ALPHA_TRANSPARENT = 0
STC_ALPHA_OPAQUE = 0
STC_ALPHA_NOALPHA = 0
STC_CARETSTYLE_INVISIBLE = 0
STC_CARETSTYLE_LINE = 0
STC_CARETSTYLE_BLOCK = 0
STC_MARGINOPTION_NONE = 0
STC_MARGINOPTION_SUBLINESELECT = 0
STC_ANNOTATION_HIDDEN = 0
STC_ANNOTATION_STANDARD = 0
STC_ANNOTATION_BOXED = 0
STC_ANNOTATION_INDENTED = 0
STC_UNDO_MAY_COALESCE = 0
STC_VS_NONE = 0
STC_VS_RECTANGULARSELECTION = 0
STC_VS_USERACCESSIBLE = 0
STC_VS_NOWRAPLINESTART = 0
STC_TECHNOLOGY_DEFAULT = 0
STC_TECHNOLOGY_DIRECTWRITE = 0
STC_LINE_END_TYPE_DEFAULT = 0
STC_LINE_END_TYPE_UNICODE = 0
STC_KEYWORDSET_MAX = 0
STC_TYPE_BOOLEAN = 0
STC_TYPE_INTEGER = 0
STC_TYPE_STRING = 0
STC_MOD_INSERTTEXT = 0
STC_MOD_DELETETEXT = 0
STC_MOD_CHANGESTYLE = 0
STC_MOD_CHANGEFOLD = 0
STC_PERFORMED_USER = 0
STC_PERFORMED_UNDO = 0
STC_PERFORMED_REDO = 0
STC_MULTISTEPUNDOREDO = 0
STC_LASTSTEPINUNDOREDO = 0
STC_MOD_CHANGEMARKER = 0
STC_MOD_BEFOREINSERT = 0
STC_MOD_BEFOREDELETE = 0
STC_MULTILINEUNDOREDO = 0
STC_STARTACTION = 0
STC_MOD_CHANGEINDICATOR = 0
STC_MOD_CHANGELINESTATE = 0
STC_MOD_CHANGEMARGIN = 0
STC_MOD_CHANGEANNOTATION = 0
STC_MOD_CONTAINER = 0
STC_MOD_LEXERSTATE = 0
STC_MOD_INSERTCHECK = 0
STC_MOD_CHANGETABSTOPS = 0
STC_MODEVENTMASKALL = 0
STC_UPDATE_CONTENT = 0
STC_UPDATE_SELECTION = 0
STC_UPDATE_V_SCROLL = 0
STC_UPDATE_H_SCROLL = 0
STC_KEY_DOWN = 0
STC_KEY_UP = 0
STC_KEY_LEFT = 0
STC_KEY_RIGHT = 0
STC_KEY_HOME = 0
STC_KEY_END = 0
STC_KEY_PRIOR = 0
STC_KEY_NEXT = 0
STC_KEY_DELETE = 0
STC_KEY_INSERT = 0
STC_KEY_ESCAPE = 0
STC_KEY_BACK = 0
STC_KEY_TAB = 0
STC_KEY_RETURN = 0
STC_KEY_ADD = 0
STC_KEY_SUBTRACT = 0
STC_KEY_DIVIDE = 0
STC_KEY_WIN = 0
STC_KEY_RWIN = 0
STC_KEY_MENU = 0
STC_KEYMOD_NORM = 0
STC_KEYMOD_SHIFT = 0
STC_KEYMOD_CTRL = 0
STC_KEYMOD_ALT = 0
STC_KEYMOD_SUPER = 0
STC_KEYMOD_META = 0
STC_AC_FILLUP = 0
STC_AC_DOUBLECLICK = 0
STC_AC_TAB = 0
STC_AC_NEWLINE = 0
STC_AC_COMMAND = 0
STC_LEX_CONTAINER = 0
STC_LEX_NULL = 0
STC_LEX_PYTHON = 0
STC_LEX_CPP = 0
STC_LEX_HTML = 0
STC_LEX_XML = 0
STC_LEX_PERL = 0
STC_LEX_SQL = 0
STC_LEX_VB = 0
STC_LEX_PROPERTIES = 0
STC_LEX_ERRORLIST = 0
STC_LEX_MAKEFILE = 0
STC_LEX_BATCH = 0
STC_LEX_XCODE = 0
STC_LEX_LATEX = 0
STC_LEX_LUA = 0
STC_LEX_DIFF = 0
STC_LEX_CONF = 0
STC_LEX_PASCAL = 0
STC_LEX_AVE = 0
STC_LEX_ADA = 0
STC_LEX_LISP = 0
STC_LEX_RUBY = 0
STC_LEX_EIFFEL = 0
STC_LEX_EIFFELKW = 0
STC_LEX_TCL = 0
STC_LEX_NNCRONTAB = 0
STC_LEX_BULLANT = 0
STC_LEX_VBSCRIPT = 0
STC_LEX_BAAN = 0
STC_LEX_MATLAB = 0
STC_LEX_SCRIPTOL = 0
STC_LEX_ASM = 0
STC_LEX_CPPNOCASE = 0
STC_LEX_FORTRAN = 0
STC_LEX_F77 = 0
STC_LEX_CSS = 0
STC_LEX_POV = 0
STC_LEX_LOUT = 0
STC_LEX_ESCRIPT = 0
STC_LEX_PS = 0
STC_LEX_NSIS = 0
STC_LEX_MMIXAL = 0
STC_LEX_CLW = 0
STC_LEX_CLWNOCASE = 0
STC_LEX_LOT = 0
STC_LEX_YAML = 0
STC_LEX_TEX = 0
STC_LEX_METAPOST = 0
STC_LEX_POWERBASIC = 0
STC_LEX_FORTH = 0
STC_LEX_ERLANG = 0
STC_LEX_OCTAVE = 0
STC_LEX_MSSQL = 0
STC_LEX_VERILOG = 0
STC_LEX_KIX = 0
STC_LEX_GUI4CLI = 0
STC_LEX_SPECMAN = 0
STC_LEX_AU3 = 0
STC_LEX_APDL = 0
STC_LEX_BASH = 0
STC_LEX_ASN1 = 0
STC_LEX_VHDL = 0
STC_LEX_CAML = 0
STC_LEX_BLITZBASIC = 0
STC_LEX_PUREBASIC = 0
STC_LEX_HASKELL = 0
STC_LEX_PHPSCRIPT = 0
STC_LEX_TADS3 = 0
STC_LEX_REBOL = 0
STC_LEX_SMALLTALK = 0
STC_LEX_FLAGSHIP = 0
STC_LEX_CSOUND = 0
STC_LEX_FREEBASIC = 0
STC_LEX_INNOSETUP = 0
STC_LEX_OPAL = 0
STC_LEX_SPICE = 0
STC_LEX_D = 0
STC_LEX_CMAKE = 0
STC_LEX_GAP = 0
STC_LEX_PLM = 0
STC_LEX_PROGRESS = 0
STC_LEX_ABAQUS = 0
STC_LEX_ASYMPTOTE = 0
STC_LEX_R = 0
STC_LEX_MAGIK = 0
STC_LEX_POWERSHELL = 0
STC_LEX_MYSQL = 0
STC_LEX_PO = 0
STC_LEX_TAL = 0
STC_LEX_COBOL = 0
STC_LEX_TACL = 0
STC_LEX_SORCUS = 0
STC_LEX_POWERPRO = 0
STC_LEX_NIMROD = 0
STC_LEX_SML = 0
STC_LEX_MARKDOWN = 0
STC_LEX_TXT2TAGS = 0
STC_LEX_A68K = 0
STC_LEX_MODULA = 0
STC_LEX_COFFEESCRIPT = 0
STC_LEX_TCMD = 0
STC_LEX_AVS = 0
STC_LEX_ECL = 0
STC_LEX_OSCRIPT = 0
STC_LEX_VISUALPROLOG = 0
STC_LEX_LITERATEHASKELL = 0
STC_LEX_STTXT = 0
STC_LEX_KVIRC = 0
STC_LEX_RUST = 0
STC_LEX_DMAP = 0
STC_LEX_AS = 0
STC_LEX_DMIS = 0
STC_LEX_REGISTRY = 0
STC_LEX_BIBTEX = 0
STC_LEX_SREC = 0
STC_LEX_IHEX = 0
STC_LEX_TEHEX = 0
STC_LEX_JSON = 0
STC_LEX_EDIFACT = 0
STC_LEX_AUTOMATIC = 0
STC_P_DEFAULT = 0
STC_P_COMMENTLINE = 0
STC_P_NUMBER = 0
STC_P_STRING = 0
STC_P_CHARACTER = 0
STC_P_WORD = 0
STC_P_TRIPLE = 0
STC_P_TRIPLEDOUBLE = 0
STC_P_CLASSNAME = 0
STC_P_DEFNAME = 0
STC_P_OPERATOR = 0
STC_P_IDENTIFIER = 0
STC_P_COMMENTBLOCK = 0
STC_P_STRINGEOL = 0
STC_P_WORD2 = 0
STC_P_DECORATOR = 0
STC_C_DEFAULT = 0
STC_C_COMMENT = 0
STC_C_COMMENTLINE = 0
STC_C_COMMENTDOC = 0
STC_C_NUMBER = 0
STC_C_WORD = 0
STC_C_STRING = 0
STC_C_CHARACTER = 0
STC_C_UUID = 0
STC_C_PREPROCESSOR = 0
STC_C_OPERATOR = 0
STC_C_IDENTIFIER = 0
STC_C_STRINGEOL = 0
STC_C_VERBATIM = 0
STC_C_REGEX = 0
STC_C_COMMENTLINEDOC = 0
STC_C_WORD2 = 0
STC_C_COMMENTDOCKEYWORD = 0
STC_C_COMMENTDOCKEYWORDERROR = 0
STC_C_GLOBALCLASS = 0
STC_C_STRINGRAW = 0
STC_C_TRIPLEVERBATIM = 0
STC_C_HASHQUOTEDSTRING = 0
STC_C_PREPROCESSORCOMMENT = 0
STC_C_PREPROCESSORCOMMENTDOC = 0
STC_C_USERLITERAL = 0
STC_C_TASKMARKER = 0
STC_C_ESCAPESEQUENCE = 0
STC_D_DEFAULT = 0
STC_D_COMMENT = 0
STC_D_COMMENTLINE = 0
STC_D_COMMENTDOC = 0
STC_D_COMMENTNESTED = 0
STC_D_NUMBER = 0
STC_D_WORD = 0
STC_D_WORD2 = 0
STC_D_WORD3 = 0
STC_D_TYPEDEF = 0
STC_D_STRING = 0
STC_D_STRINGEOL = 0
STC_D_CHARACTER = 0
STC_D_OPERATOR = 0
STC_D_IDENTIFIER = 0
STC_D_COMMENTLINEDOC = 0
STC_D_COMMENTDOCKEYWORD = 0
STC_D_COMMENTDOCKEYWORDERROR = 0
STC_D_STRINGB = 0
STC_D_STRINGR = 0
STC_D_WORD5 = 0
STC_D_WORD6 = 0
STC_D_WORD7 = 0
STC_TCL_DEFAULT = 0
STC_TCL_COMMENT = 0
STC_TCL_COMMENTLINE = 0
STC_TCL_NUMBER = 0
STC_TCL_WORD_IN_QUOTE = 0
STC_TCL_IN_QUOTE = 0
STC_TCL_OPERATOR = 0
STC_TCL_IDENTIFIER = 0
STC_TCL_SUBSTITUTION = 0
STC_TCL_SUB_BRACE = 0
STC_TCL_MODIFIER = 0
STC_TCL_EXPAND = 0
STC_TCL_WORD = 0
STC_TCL_WORD2 = 0
STC_TCL_WORD3 = 0
STC_TCL_WORD4 = 0
STC_TCL_WORD5 = 0
STC_TCL_WORD6 = 0
STC_TCL_WORD7 = 0
STC_TCL_WORD8 = 0
STC_TCL_COMMENT_BOX = 0
STC_TCL_BLOCK_COMMENT = 0
STC_H_DEFAULT = 0
STC_H_TAG = 0
STC_H_TAGUNKNOWN = 0
STC_H_ATTRIBUTE = 0
STC_H_ATTRIBUTEUNKNOWN = 0
STC_H_NUMBER = 0
STC_H_DOUBLESTRING = 0
STC_H_SINGLESTRING = 0
STC_H_OTHER = 0
STC_H_COMMENT = 0
STC_H_ENTITY = 0
STC_H_TAGEND = 0
STC_H_XMLSTART = 0
STC_H_XMLEND = 0
STC_H_SCRIPT = 0
STC_H_ASP = 0
STC_H_ASPAT = 0
STC_H_CDATA = 0
STC_H_QUESTION = 0
STC_H_VALUE = 0
STC_H_XCCOMMENT = 0
STC_H_SGML_DEFAULT = 0
STC_H_SGML_COMMAND = 0
STC_H_SGML_1ST_PARAM = 0
STC_H_SGML_DOUBLESTRING = 0
STC_H_SGML_SIMPLESTRING = 0
STC_H_SGML_ERROR = 0
STC_H_SGML_SPECIAL = 0
STC_H_SGML_ENTITY = 0
STC_H_SGML_COMMENT = 0
STC_H_SGML_1ST_PARAM_COMMENT = 0
STC_H_SGML_BLOCK_DEFAULT = 0
STC_HJ_START = 0
STC_HJ_DEFAULT = 0
STC_HJ_COMMENT = 0
STC_HJ_COMMENTLINE = 0
STC_HJ_COMMENTDOC = 0
STC_HJ_NUMBER = 0
STC_HJ_WORD = 0
STC_HJ_KEYWORD = 0
STC_HJ_DOUBLESTRING = 0
STC_HJ_SINGLESTRING = 0
STC_HJ_SYMBOLS = 0
STC_HJ_STRINGEOL = 0
STC_HJ_REGEX = 0
STC_HJA_START = 0
STC_HJA_DEFAULT = 0
STC_HJA_COMMENT = 0
STC_HJA_COMMENTLINE = 0
STC_HJA_COMMENTDOC = 0
STC_HJA_NUMBER = 0
STC_HJA_WORD = 0
STC_HJA_KEYWORD = 0
STC_HJA_DOUBLESTRING = 0
STC_HJA_SINGLESTRING = 0
STC_HJA_SYMBOLS = 0
STC_HJA_STRINGEOL = 0
STC_HJA_REGEX = 0
STC_HB_START = 0
STC_HB_DEFAULT = 0
STC_HB_COMMENTLINE = 0
STC_HB_NUMBER = 0
STC_HB_WORD = 0
STC_HB_STRING = 0
STC_HB_IDENTIFIER = 0
STC_HB_STRINGEOL = 0
STC_HBA_START = 0
STC_HBA_DEFAULT = 0
STC_HBA_COMMENTLINE = 0
STC_HBA_NUMBER = 0
STC_HBA_WORD = 0
STC_HBA_STRING = 0
STC_HBA_IDENTIFIER = 0
STC_HBA_STRINGEOL = 0
STC_HP_START = 0
STC_HP_DEFAULT = 0
STC_HP_COMMENTLINE = 0
STC_HP_NUMBER = 0
STC_HP_STRING = 0
STC_HP_CHARACTER = 0
STC_HP_WORD = 0
STC_HP_TRIPLE = 0
STC_HP_TRIPLEDOUBLE = 0
STC_HP_CLASSNAME = 0
STC_HP_DEFNAME = 0
STC_HP_OPERATOR = 0
STC_HP_IDENTIFIER = 0
STC_HPHP_COMPLEX_VARIABLE = 0
STC_HPA_START = 0
STC_HPA_DEFAULT = 0
STC_HPA_COMMENTLINE = 0
STC_HPA_NUMBER = 0
STC_HPA_STRING = 0
STC_HPA_CHARACTER = 0
STC_HPA_WORD = 0
STC_HPA_TRIPLE = 0
STC_HPA_TRIPLEDOUBLE = 0
STC_HPA_CLASSNAME = 0
STC_HPA_DEFNAME = 0
STC_HPA_OPERATOR = 0
STC_HPA_IDENTIFIER = 0
STC_HPHP_DEFAULT = 0
STC_HPHP_HSTRING = 0
STC_HPHP_SIMPLESTRING = 0
STC_HPHP_WORD = 0
STC_HPHP_NUMBER = 0
STC_HPHP_VARIABLE = 0
STC_HPHP_COMMENT = 0
STC_HPHP_COMMENTLINE = 0
STC_HPHP_HSTRING_VARIABLE = 0
STC_HPHP_OPERATOR = 0
STC_PL_DEFAULT = 0
STC_PL_ERROR = 0
STC_PL_COMMENTLINE = 0
STC_PL_POD = 0
STC_PL_NUMBER = 0
STC_PL_WORD = 0
STC_PL_STRING = 0
STC_PL_CHARACTER = 0
STC_PL_PUNCTUATION = 0
STC_PL_PREPROCESSOR = 0
STC_PL_OPERATOR = 0
STC_PL_IDENTIFIER = 0
STC_PL_SCALAR = 0
STC_PL_ARRAY = 0
STC_PL_HASH = 0
STC_PL_SYMBOLTABLE = 0
STC_PL_VARIABLE_INDEXER = 0
STC_PL_REGEX = 0
STC_PL_REGSUBST = 0
STC_PL_LONGQUOTE = 0
STC_PL_BACKTICKS = 0
STC_PL_DATASECTION = 0
STC_PL_HERE_DELIM = 0
STC_PL_HERE_Q = 0
STC_PL_HERE_QQ = 0
STC_PL_HERE_QX = 0
STC_PL_STRING_Q = 0
STC_PL_STRING_QQ = 0
STC_PL_STRING_QX = 0
STC_PL_STRING_QR = 0
STC_PL_STRING_QW = 0
STC_PL_POD_VERB = 0
STC_PL_SUB_PROTOTYPE = 0
STC_PL_FORMAT_IDENT = 0
STC_PL_FORMAT = 0
STC_PL_STRING_VAR = 0
STC_PL_XLAT = 0
STC_PL_REGEX_VAR = 0
STC_PL_REGSUBST_VAR = 0
STC_PL_BACKTICKS_VAR = 0
STC_PL_HERE_QQ_VAR = 0
STC_PL_HERE_QX_VAR = 0
STC_PL_STRING_QQ_VAR = 0
STC_PL_STRING_QX_VAR = 0
STC_PL_STRING_QR_VAR = 0
STC_RB_DEFAULT = 0
STC_RB_ERROR = 0
STC_RB_COMMENTLINE = 0
STC_RB_POD = 0
STC_RB_NUMBER = 0
STC_RB_WORD = 0
STC_RB_STRING = 0
STC_RB_CHARACTER = 0
STC_RB_CLASSNAME = 0
STC_RB_DEFNAME = 0
STC_RB_OPERATOR = 0
STC_RB_IDENTIFIER = 0
STC_RB_REGEX = 0
STC_RB_GLOBAL = 0
STC_RB_SYMBOL = 0
STC_RB_MODULE_NAME = 0
STC_RB_INSTANCE_VAR = 0
STC_RB_CLASS_VAR = 0
STC_RB_BACKTICKS = 0
STC_RB_DATASECTION = 0
STC_RB_HERE_DELIM = 0
STC_RB_HERE_Q = 0
STC_RB_HERE_QQ = 0
STC_RB_HERE_QX = 0
STC_RB_STRING_Q = 0
STC_RB_STRING_QQ = 0
STC_RB_STRING_QX = 0
STC_RB_STRING_QR = 0
STC_RB_STRING_QW = 0
STC_RB_WORD_DEMOTED = 0
STC_RB_STDIN = 0
STC_RB_STDOUT = 0
STC_RB_STDERR = 0
STC_RB_UPPER_BOUND = 0
STC_B_DEFAULT = 0
STC_B_COMMENT = 0
STC_B_NUMBER = 0
STC_B_KEYWORD = 0
STC_B_STRING = 0
STC_B_PREPROCESSOR = 0
STC_B_OPERATOR = 0
STC_B_IDENTIFIER = 0
STC_B_DATE = 0
STC_B_STRINGEOL = 0
STC_B_KEYWORD2 = 0
STC_B_KEYWORD3 = 0
STC_B_KEYWORD4 = 0
STC_B_CONSTANT = 0
STC_B_ASM = 0
STC_B_LABEL = 0
STC_B_ERROR = 0
STC_B_HEXNUMBER = 0
STC_B_BINNUMBER = 0
STC_B_COMMENTBLOCK = 0
STC_B_DOCLINE = 0
STC_B_DOCBLOCK = 0
STC_B_DOCKEYWORD = 0
STC_PROPS_DEFAULT = 0
STC_PROPS_COMMENT = 0
STC_PROPS_SECTION = 0
STC_PROPS_ASSIGNMENT = 0
STC_PROPS_DEFVAL = 0
STC_PROPS_KEY = 0
STC_L_DEFAULT = 0
STC_L_COMMAND = 0
STC_L_TAG = 0
STC_L_MATH = 0
STC_L_COMMENT = 0
STC_L_TAG2 = 0
STC_L_MATH2 = 0
STC_L_COMMENT2 = 0
STC_L_VERBATIM = 0
STC_L_SHORTCMD = 0
STC_L_SPECIAL = 0
STC_L_CMDOPT = 0
STC_L_ERROR = 0
STC_LUA_DEFAULT = 0
STC_LUA_COMMENT = 0
STC_LUA_COMMENTLINE = 0
STC_LUA_COMMENTDOC = 0
STC_LUA_NUMBER = 0
STC_LUA_WORD = 0
STC_LUA_STRING = 0
STC_LUA_CHARACTER = 0
STC_LUA_LITERALSTRING = 0
STC_LUA_PREPROCESSOR = 0
STC_LUA_OPERATOR = 0
STC_LUA_IDENTIFIER = 0
STC_LUA_STRINGEOL = 0
STC_LUA_WORD2 = 0
STC_LUA_WORD3 = 0
STC_LUA_WORD4 = 0
STC_LUA_WORD5 = 0
STC_LUA_WORD6 = 0
STC_LUA_WORD7 = 0
STC_LUA_WORD8 = 0
STC_LUA_LABEL = 0
STC_ERR_DEFAULT = 0
STC_ERR_PYTHON = 0
STC_ERR_GCC = 0
STC_ERR_MS = 0
STC_ERR_CMD = 0
STC_ERR_BORLAND = 0
STC_ERR_PERL = 0
STC_ERR_NET = 0
STC_ERR_LUA = 0
STC_ERR_CTAG = 0
STC_ERR_DIFF_CHANGED = 0
STC_ERR_DIFF_ADDITION = 0
STC_ERR_DIFF_DELETION = 0
STC_ERR_DIFF_MESSAGE = 0
STC_ERR_PHP = 0
STC_ERR_ELF = 0
STC_ERR_IFC = 0
STC_ERR_IFORT = 0
STC_ERR_ABSF = 0
STC_ERR_TIDY = 0
STC_ERR_JAVA_STACK = 0
STC_ERR_VALUE = 0
STC_ERR_GCC_INCLUDED_FROM = 0
STC_ERR_ESCSEQ = 0
STC_ERR_ESCSEQ_UNKNOWN = 0
STC_ERR_ES_BLACK = 0
STC_ERR_ES_RED = 0
STC_ERR_ES_GREEN = 0
STC_ERR_ES_BROWN = 0
STC_ERR_ES_BLUE = 0
STC_ERR_ES_MAGENTA = 0
STC_ERR_ES_CYAN = 0
STC_ERR_ES_GRAY = 0
STC_ERR_ES_DARK_GRAY = 0
STC_ERR_ES_BRIGHT_RED = 0
STC_ERR_ES_BRIGHT_GREEN = 0
STC_ERR_ES_YELLOW = 0
STC_ERR_ES_BRIGHT_BLUE = 0
STC_ERR_ES_BRIGHT_MAGENTA = 0
STC_ERR_ES_BRIGHT_CYAN = 0
STC_ERR_ES_WHITE = 0
STC_BAT_DEFAULT = 0
STC_BAT_COMMENT = 0
STC_BAT_WORD = 0
STC_BAT_LABEL = 0
STC_BAT_HIDE = 0
STC_BAT_COMMAND = 0
STC_BAT_IDENTIFIER = 0
STC_BAT_OPERATOR = 0
STC_TCMD_DEFAULT = 0
STC_TCMD_COMMENT = 0
STC_TCMD_WORD = 0
STC_TCMD_LABEL = 0
STC_TCMD_HIDE = 0
STC_TCMD_COMMAND = 0
STC_TCMD_IDENTIFIER = 0
STC_TCMD_OPERATOR = 0
STC_TCMD_ENVIRONMENT = 0
STC_TCMD_EXPANSION = 0
STC_TCMD_CLABEL = 0
STC_MAKE_DEFAULT = 0
STC_MAKE_COMMENT = 0
STC_MAKE_PREPROCESSOR = 0
STC_MAKE_IDENTIFIER = 0
STC_MAKE_OPERATOR = 0
STC_MAKE_TARGET = 0
STC_MAKE_IDEOL = 0
STC_DIFF_DEFAULT = 0
STC_DIFF_COMMENT = 0
STC_DIFF_COMMAND = 0
STC_DIFF_HEADER = 0
STC_DIFF_POSITION = 0
STC_DIFF_DELETED = 0
STC_DIFF_ADDED = 0
STC_DIFF_CHANGED = 0
STC_CONF_DEFAULT = 0
STC_CONF_COMMENT = 0
STC_CONF_NUMBER = 0
STC_CONF_IDENTIFIER = 0
STC_CONF_EXTENSION = 0
STC_CONF_PARAMETER = 0
STC_CONF_STRING = 0
STC_CONF_OPERATOR = 0
STC_CONF_IP = 0
STC_CONF_DIRECTIVE = 0
STC_AVE_DEFAULT = 0
STC_AVE_COMMENT = 0
STC_AVE_NUMBER = 0
STC_AVE_WORD = 0
STC_AVE_STRING = 0
STC_AVE_ENUM = 0
STC_AVE_STRINGEOL = 0
STC_AVE_IDENTIFIER = 0
STC_AVE_OPERATOR = 0
STC_AVE_WORD1 = 0
STC_AVE_WORD2 = 0
STC_AVE_WORD3 = 0
STC_AVE_WORD4 = 0
STC_AVE_WORD5 = 0
STC_AVE_WORD6 = 0
STC_ADA_DEFAULT = 0
STC_ADA_WORD = 0
STC_ADA_IDENTIFIER = 0
STC_ADA_NUMBER = 0
STC_ADA_DELIMITER = 0
STC_ADA_CHARACTER = 0
STC_ADA_CHARACTEREOL = 0
STC_ADA_STRING = 0
STC_ADA_STRINGEOL = 0
STC_ADA_LABEL = 0
STC_ADA_COMMENTLINE = 0
STC_ADA_ILLEGAL = 0
STC_BAAN_DEFAULT = 0
STC_BAAN_COMMENT = 0
STC_BAAN_COMMENTDOC = 0
STC_BAAN_NUMBER = 0
STC_BAAN_WORD = 0
STC_BAAN_STRING = 0
STC_BAAN_PREPROCESSOR = 0
STC_BAAN_OPERATOR = 0
STC_BAAN_IDENTIFIER = 0
STC_BAAN_STRINGEOL = 0
STC_BAAN_WORD2 = 0
STC_BAAN_WORD3 = 0
STC_BAAN_WORD4 = 0
STC_BAAN_WORD5 = 0
STC_BAAN_WORD6 = 0
STC_BAAN_WORD7 = 0
STC_BAAN_WORD8 = 0
STC_BAAN_WORD9 = 0
STC_BAAN_TABLEDEF = 0
STC_BAAN_TABLESQL = 0
STC_BAAN_FUNCTION = 0
STC_BAAN_DOMDEF = 0
STC_BAAN_FUNCDEF = 0
STC_BAAN_OBJECTDEF = 0
STC_BAAN_DEFINEDEF = 0
STC_LISP_DEFAULT = 0
STC_LISP_COMMENT = 0
STC_LISP_NUMBER = 0
STC_LISP_KEYWORD = 0
STC_LISP_KEYWORD_KW = 0
STC_LISP_SYMBOL = 0
STC_LISP_STRING = 0
STC_LISP_STRINGEOL = 0
STC_LISP_IDENTIFIER = 0
STC_LISP_OPERATOR = 0
STC_LISP_SPECIAL = 0
STC_LISP_MULTI_COMMENT = 0
STC_EIFFEL_DEFAULT = 0
STC_EIFFEL_COMMENTLINE = 0
STC_EIFFEL_NUMBER = 0
STC_EIFFEL_WORD = 0
STC_EIFFEL_STRING = 0
STC_EIFFEL_CHARACTER = 0
STC_EIFFEL_OPERATOR = 0
STC_EIFFEL_IDENTIFIER = 0
STC_EIFFEL_STRINGEOL = 0
STC_NNCRONTAB_DEFAULT = 0
STC_NNCRONTAB_COMMENT = 0
STC_NNCRONTAB_TASK = 0
STC_NNCRONTAB_SECTION = 0
STC_NNCRONTAB_KEYWORD = 0
STC_NNCRONTAB_MODIFIER = 0
STC_NNCRONTAB_ASTERISK = 0
STC_NNCRONTAB_NUMBER = 0
STC_NNCRONTAB_STRING = 0
STC_NNCRONTAB_ENVIRONMENT = 0
STC_NNCRONTAB_IDENTIFIER = 0
STC_FORTH_DEFAULT = 0
STC_FORTH_COMMENT = 0
STC_FORTH_COMMENT_ML = 0
STC_FORTH_IDENTIFIER = 0
STC_FORTH_CONTROL = 0
STC_FORTH_KEYWORD = 0
STC_FORTH_DEFWORD = 0
STC_FORTH_PREWORD1 = 0
STC_FORTH_PREWORD2 = 0
STC_FORTH_NUMBER = 0
STC_FORTH_STRING = 0
STC_FORTH_LOCALE = 0
STC_MATLAB_DEFAULT = 0
STC_MATLAB_COMMENT = 0
STC_MATLAB_COMMAND = 0
STC_MATLAB_NUMBER = 0
STC_MATLAB_KEYWORD = 0
STC_MATLAB_STRING = 0
STC_MATLAB_OPERATOR = 0
STC_MATLAB_IDENTIFIER = 0
STC_MATLAB_DOUBLEQUOTESTRING = 0
STC_SCRIPTOL_DEFAULT = 0
STC_SCRIPTOL_WHITE = 0
STC_SCRIPTOL_COMMENTLINE = 0
STC_SCRIPTOL_PERSISTENT = 0
STC_SCRIPTOL_CSTYLE = 0
STC_SCRIPTOL_COMMENTBLOCK = 0
STC_SCRIPTOL_NUMBER = 0
STC_SCRIPTOL_STRING = 0
STC_SCRIPTOL_CHARACTER = 0
STC_SCRIPTOL_STRINGEOL = 0
STC_SCRIPTOL_KEYWORD = 0
STC_SCRIPTOL_OPERATOR = 0
STC_SCRIPTOL_IDENTIFIER = 0
STC_SCRIPTOL_TRIPLE = 0
STC_SCRIPTOL_CLASSNAME = 0
STC_SCRIPTOL_PREPROCESSOR = 0
STC_ASM_DEFAULT = 0
STC_ASM_COMMENT = 0
STC_ASM_NUMBER = 0
STC_ASM_STRING = 0
STC_ASM_OPERATOR = 0
STC_ASM_IDENTIFIER = 0
STC_ASM_CPUINSTRUCTION = 0
STC_ASM_MATHINSTRUCTION = 0
STC_ASM_REGISTER = 0
STC_ASM_DIRECTIVE = 0
STC_ASM_DIRECTIVEOPERAND = 0
STC_ASM_COMMENTBLOCK = 0
STC_ASM_CHARACTER = 0
STC_ASM_STRINGEOL = 0
STC_ASM_EXTINSTRUCTION = 0
STC_ASM_COMMENTDIRECTIVE = 0
STC_F_DEFAULT = 0
STC_F_COMMENT = 0
STC_F_NUMBER = 0
STC_F_STRING1 = 0
STC_F_STRING2 = 0
STC_F_STRINGEOL = 0
STC_F_OPERATOR = 0
STC_F_IDENTIFIER = 0
STC_F_WORD = 0
STC_F_WORD2 = 0
STC_F_WORD3 = 0
STC_F_PREPROCESSOR = 0
STC_F_OPERATOR2 = 0
STC_F_LABEL = 0
STC_F_CONTINUATION = 0
STC_CSS_DEFAULT = 0
STC_CSS_TAG = 0
STC_CSS_CLASS = 0
STC_CSS_PSEUDOCLASS = 0
STC_CSS_UNKNOWN_PSEUDOCLASS = 0
STC_CSS_OPERATOR = 0
STC_CSS_IDENTIFIER = 0
STC_CSS_UNKNOWN_IDENTIFIER = 0
STC_CSS_VALUE = 0
STC_CSS_COMMENT = 0
STC_CSS_ID = 0
STC_CSS_IMPORTANT = 0
STC_CSS_DIRECTIVE = 0
STC_CSS_DOUBLESTRING = 0
STC_CSS_SINGLESTRING = 0
STC_CSS_IDENTIFIER2 = 0
STC_CSS_ATTRIBUTE = 0
STC_CSS_IDENTIFIER3 = 0
STC_CSS_PSEUDOELEMENT = 0
STC_CSS_EXTENDED_IDENTIFIER = 0
STC_CSS_EXTENDED_PSEUDOCLASS = 0
STC_CSS_EXTENDED_PSEUDOELEMENT = 0
STC_CSS_MEDIA = 0
STC_CSS_VARIABLE = 0
STC_POV_DEFAULT = 0
STC_POV_COMMENT = 0
STC_POV_COMMENTLINE = 0
STC_POV_NUMBER = 0
STC_POV_OPERATOR = 0
STC_POV_IDENTIFIER = 0
STC_POV_STRING = 0
STC_POV_STRINGEOL = 0
STC_POV_DIRECTIVE = 0
STC_POV_BADDIRECTIVE = 0
STC_POV_WORD2 = 0
STC_POV_WORD3 = 0
STC_POV_WORD4 = 0
STC_POV_WORD5 = 0
STC_POV_WORD6 = 0
STC_POV_WORD7 = 0
STC_POV_WORD8 = 0
STC_LOUT_DEFAULT = 0
STC_LOUT_COMMENT = 0
STC_LOUT_NUMBER = 0
STC_LOUT_WORD = 0
STC_LOUT_WORD2 = 0
STC_LOUT_WORD3 = 0
STC_LOUT_WORD4 = 0
STC_LOUT_STRING = 0
STC_LOUT_OPERATOR = 0
STC_LOUT_IDENTIFIER = 0
STC_LOUT_STRINGEOL = 0
STC_ESCRIPT_DEFAULT = 0
STC_ESCRIPT_COMMENT = 0
STC_ESCRIPT_COMMENTLINE = 0
STC_ESCRIPT_COMMENTDOC = 0
STC_ESCRIPT_NUMBER = 0
STC_ESCRIPT_WORD = 0
STC_ESCRIPT_STRING = 0
STC_ESCRIPT_OPERATOR = 0
STC_ESCRIPT_IDENTIFIER = 0
STC_ESCRIPT_BRACE = 0
STC_ESCRIPT_WORD2 = 0
STC_ESCRIPT_WORD3 = 0
STC_PS_DEFAULT = 0
STC_PS_COMMENT = 0
STC_PS_DSC_COMMENT = 0
STC_PS_DSC_VALUE = 0
STC_PS_NUMBER = 0
STC_PS_NAME = 0
STC_PS_KEYWORD = 0
STC_PS_LITERAL = 0
STC_PS_IMMEVAL = 0
STC_PS_PAREN_ARRAY = 0
STC_PS_PAREN_DICT = 0
STC_PS_PAREN_PROC = 0
STC_PS_TEXT = 0
STC_PS_HEXSTRING = 0
STC_PS_BASE85STRING = 0
STC_PS_BADSTRINGCHAR = 0
STC_NSIS_DEFAULT = 0
STC_NSIS_COMMENT = 0
STC_NSIS_STRINGDQ = 0
STC_NSIS_STRINGLQ = 0
STC_NSIS_STRINGRQ = 0
STC_NSIS_FUNCTION = 0
STC_NSIS_VARIABLE = 0
STC_NSIS_LABEL = 0
STC_NSIS_USERDEFINED = 0
STC_NSIS_SECTIONDEF = 0
STC_NSIS_SUBSECTIONDEF = 0
STC_NSIS_IFDEFINEDEF = 0
STC_NSIS_MACRODEF = 0
STC_NSIS_STRINGVAR = 0
STC_NSIS_NUMBER = 0
STC_NSIS_SECTIONGROUP = 0
STC_NSIS_PAGEEX = 0
STC_NSIS_FUNCTIONDEF = 0
STC_NSIS_COMMENTBOX = 0
STC_MMIXAL_LEADWS = 0
STC_MMIXAL_COMMENT = 0
STC_MMIXAL_LABEL = 0
STC_MMIXAL_OPCODE = 0
STC_MMIXAL_OPCODE_PRE = 0
STC_MMIXAL_OPCODE_VALID = 0
STC_MMIXAL_OPCODE_UNKNOWN = 0
STC_MMIXAL_OPCODE_POST = 0
STC_MMIXAL_OPERANDS = 0
STC_MMIXAL_NUMBER = 0
STC_MMIXAL_REF = 0
STC_MMIXAL_CHAR = 0
STC_MMIXAL_STRING = 0
STC_MMIXAL_REGISTER = 0
STC_MMIXAL_HEX = 0
STC_MMIXAL_OPERATOR = 0
STC_MMIXAL_SYMBOL = 0
STC_MMIXAL_INCLUDE = 0
STC_CLW_DEFAULT = 0
STC_CLW_LABEL = 0
STC_CLW_COMMENT = 0
STC_CLW_STRING = 0
STC_CLW_USER_IDENTIFIER = 0
STC_CLW_INTEGER_CONSTANT = 0
STC_CLW_REAL_CONSTANT = 0
STC_CLW_PICTURE_STRING = 0
STC_CLW_KEYWORD = 0
STC_CLW_COMPILER_DIRECTIVE = 0
STC_CLW_RUNTIME_EXPRESSIONS = 0
STC_CLW_BUILTIN_PROCEDURES_FUNCTION = 0
STC_CLW_STRUCTURE_DATA_TYPE = 0
STC_CLW_ATTRIBUTE = 0
STC_CLW_STANDARD_EQUATE = 0
STC_CLW_ERROR = 0
STC_CLW_DEPRECATED = 0
STC_LOT_DEFAULT = 0
STC_LOT_HEADER = 0
STC_LOT_BREAK = 0
STC_LOT_SET = 0
STC_LOT_PASS = 0
STC_LOT_FAIL = 0
STC_LOT_ABORT = 0
STC_YAML_DEFAULT = 0
STC_YAML_COMMENT = 0
STC_YAML_IDENTIFIER = 0
STC_YAML_KEYWORD = 0
STC_YAML_NUMBER = 0
STC_YAML_REFERENCE = 0
STC_YAML_DOCUMENT = 0
STC_YAML_TEXT = 0
STC_YAML_ERROR = 0
STC_YAML_OPERATOR = 0
STC_TEX_DEFAULT = 0
STC_TEX_SPECIAL = 0
STC_TEX_GROUP = 0
STC_TEX_SYMBOL = 0
STC_TEX_COMMAND = 0
STC_TEX_TEXT = 0
STC_METAPOST_DEFAULT = 0
STC_METAPOST_SPECIAL = 0
STC_METAPOST_GROUP = 0
STC_METAPOST_SYMBOL = 0
STC_METAPOST_COMMAND = 0
STC_METAPOST_TEXT = 0
STC_METAPOST_EXTRA = 0
STC_ERLANG_DEFAULT = 0
STC_ERLANG_COMMENT = 0
STC_ERLANG_VARIABLE = 0
STC_ERLANG_NUMBER = 0
STC_ERLANG_KEYWORD = 0
STC_ERLANG_STRING = 0
STC_ERLANG_OPERATOR = 0
STC_ERLANG_ATOM = 0
STC_ERLANG_FUNCTION_NAME = 0
STC_ERLANG_CHARACTER = 0
STC_ERLANG_MACRO = 0
STC_ERLANG_RECORD = 0
STC_ERLANG_PREPROC = 0
STC_ERLANG_NODE_NAME = 0
STC_ERLANG_COMMENT_FUNCTION = 0
STC_ERLANG_COMMENT_MODULE = 0
STC_ERLANG_COMMENT_DOC = 0
STC_ERLANG_COMMENT_DOC_MACRO = 0
STC_ERLANG_ATOM_QUOTED = 0
STC_ERLANG_MACRO_QUOTED = 0
STC_ERLANG_RECORD_QUOTED = 0
STC_ERLANG_NODE_NAME_QUOTED = 0
STC_ERLANG_BIFS = 0
STC_ERLANG_MODULES = 0
STC_ERLANG_MODULES_ATT = 0
STC_ERLANG_UNKNOWN = 0
STC_MSSQL_DEFAULT = 0
STC_MSSQL_COMMENT = 0
STC_MSSQL_LINE_COMMENT = 0
STC_MSSQL_NUMBER = 0
STC_MSSQL_STRING = 0
STC_MSSQL_OPERATOR = 0
STC_MSSQL_IDENTIFIER = 0
STC_MSSQL_VARIABLE = 0
STC_MSSQL_COLUMN_NAME = 0
STC_MSSQL_STATEMENT = 0
STC_MSSQL_DATATYPE = 0
STC_MSSQL_SYSTABLE = 0
STC_MSSQL_GLOBAL_VARIABLE = 0
STC_MSSQL_FUNCTION = 0
STC_MSSQL_STORED_PROCEDURE = 0
STC_MSSQL_DEFAULT_PREF_DATATYPE = 0
STC_MSSQL_COLUMN_NAME_2 = 0
STC_V_DEFAULT = 0
STC_V_COMMENT = 0
STC_V_COMMENTLINE = 0
STC_V_COMMENTLINEBANG = 0
STC_V_NUMBER = 0
STC_V_WORD = 0
STC_V_STRING = 0
STC_V_WORD2 = 0
STC_V_WORD3 = 0
STC_V_PREPROCESSOR = 0
STC_V_OPERATOR = 0
STC_V_IDENTIFIER = 0
STC_V_STRINGEOL = 0
STC_V_USER = 0
STC_V_COMMENT_WORD = 0
STC_V_INPUT = 0
STC_V_OUTPUT = 0
STC_V_INOUT = 0
STC_V_PORT_CONNECT = 0
STC_KIX_DEFAULT = 0
STC_KIX_COMMENT = 0
STC_KIX_STRING1 = 0
STC_KIX_STRING2 = 0
STC_KIX_NUMBER = 0
STC_KIX_VAR = 0
STC_KIX_MACRO = 0
STC_KIX_KEYWORD = 0
STC_KIX_FUNCTIONS = 0
STC_KIX_OPERATOR = 0
STC_KIX_COMMENTSTREAM = 0
STC_KIX_IDENTIFIER = 0
STC_GC_DEFAULT = 0
STC_GC_COMMENTLINE = 0
STC_GC_COMMENTBLOCK = 0
STC_GC_GLOBAL = 0
STC_GC_EVENT = 0
STC_GC_ATTRIBUTE = 0
STC_GC_CONTROL = 0
STC_GC_COMMAND = 0
STC_GC_STRING = 0
STC_GC_OPERATOR = 0
STC_SN_DEFAULT = 0
STC_SN_CODE = 0
STC_SN_COMMENTLINE = 0
STC_SN_COMMENTLINEBANG = 0
STC_SN_NUMBER = 0
STC_SN_WORD = 0
STC_SN_STRING = 0
STC_SN_WORD2 = 0
STC_SN_WORD3 = 0
STC_SN_PREPROCESSOR = 0
STC_SN_OPERATOR = 0
STC_SN_IDENTIFIER = 0
STC_SN_STRINGEOL = 0
STC_SN_REGEXTAG = 0
STC_SN_SIGNAL = 0
STC_SN_USER = 0
STC_AU3_DEFAULT = 0
STC_AU3_COMMENT = 0
STC_AU3_COMMENTBLOCK = 0
STC_AU3_NUMBER = 0
STC_AU3_FUNCTION = 0
STC_AU3_KEYWORD = 0
STC_AU3_MACRO = 0
STC_AU3_STRING = 0
STC_AU3_OPERATOR = 0
STC_AU3_VARIABLE = 0
STC_AU3_SENT = 0
STC_AU3_PREPROCESSOR = 0
STC_AU3_SPECIAL = 0
STC_AU3_EXPAND = 0
STC_AU3_COMOBJ = 0
STC_AU3_UDF = 0
STC_APDL_DEFAULT = 0
STC_APDL_COMMENT = 0
STC_APDL_COMMENTBLOCK = 0
STC_APDL_NUMBER = 0
STC_APDL_STRING = 0
STC_APDL_OPERATOR = 0
STC_APDL_WORD = 0
STC_APDL_PROCESSOR = 0
STC_APDL_COMMAND = 0
STC_APDL_SLASHCOMMAND = 0
STC_APDL_STARCOMMAND = 0
STC_APDL_ARGUMENT = 0
STC_APDL_FUNCTION = 0
STC_SH_DEFAULT = 0
STC_SH_ERROR = 0
STC_SH_COMMENTLINE = 0
STC_SH_NUMBER = 0
STC_SH_WORD = 0
STC_SH_STRING = 0
STC_SH_CHARACTER = 0
STC_SH_OPERATOR = 0
STC_SH_IDENTIFIER = 0
STC_SH_SCALAR = 0
STC_SH_PARAM = 0
STC_SH_BACKTICKS = 0
STC_SH_HERE_DELIM = 0
STC_SH_HERE_Q = 0
STC_ASN1_DEFAULT = 0
STC_ASN1_COMMENT = 0
STC_ASN1_IDENTIFIER = 0
STC_ASN1_STRING = 0
STC_ASN1_OID = 0
STC_ASN1_SCALAR = 0
STC_ASN1_KEYWORD = 0
STC_ASN1_ATTRIBUTE = 0
STC_ASN1_DESCRIPTOR = 0
STC_ASN1_TYPE = 0
STC_ASN1_OPERATOR = 0
STC_VHDL_DEFAULT = 0
STC_VHDL_COMMENT = 0
STC_VHDL_COMMENTLINEBANG = 0
STC_VHDL_NUMBER = 0
STC_VHDL_STRING = 0
STC_VHDL_OPERATOR = 0
STC_VHDL_IDENTIFIER = 0
STC_VHDL_STRINGEOL = 0
STC_VHDL_KEYWORD = 0
STC_VHDL_STDOPERATOR = 0
STC_VHDL_ATTRIBUTE = 0
STC_VHDL_STDFUNCTION = 0
STC_VHDL_STDPACKAGE = 0
STC_VHDL_STDTYPE = 0
STC_VHDL_USERWORD = 0
STC_VHDL_BLOCK_COMMENT = 0
STC_CAML_DEFAULT = 0
STC_CAML_IDENTIFIER = 0
STC_CAML_TAGNAME = 0
STC_CAML_KEYWORD = 0
STC_CAML_KEYWORD2 = 0
STC_CAML_KEYWORD3 = 0
STC_CAML_LINENUM = 0
STC_CAML_OPERATOR = 0
STC_CAML_NUMBER = 0
STC_CAML_CHAR = 0
STC_CAML_WHITE = 0
STC_CAML_STRING = 0
STC_CAML_COMMENT = 0
STC_CAML_COMMENT1 = 0
STC_CAML_COMMENT2 = 0
STC_CAML_COMMENT3 = 0
STC_HA_DEFAULT = 0
STC_HA_IDENTIFIER = 0
STC_HA_KEYWORD = 0
STC_HA_NUMBER = 0
STC_HA_STRING = 0
STC_HA_CHARACTER = 0
STC_HA_CLASS = 0
STC_HA_MODULE = 0
STC_HA_CAPITAL = 0
STC_HA_DATA = 0
STC_HA_IMPORT = 0
STC_HA_OPERATOR = 0
STC_HA_INSTANCE = 0
STC_HA_COMMENTLINE = 0
STC_HA_COMMENTBLOCK = 0
STC_HA_COMMENTBLOCK2 = 0
STC_HA_COMMENTBLOCK3 = 0
STC_HA_PRAGMA = 0
STC_HA_PREPROCESSOR = 0
STC_HA_STRINGEOL = 0
STC_HA_RESERVED_OPERATOR = 0
STC_HA_LITERATE_COMMENT = 0
STC_HA_LITERATE_CODEDELIM = 0
STC_T3_DEFAULT = 0
STC_T3_X_DEFAULT = 0
STC_T3_PREPROCESSOR = 0
STC_T3_BLOCK_COMMENT = 0
STC_T3_LINE_COMMENT = 0
STC_T3_OPERATOR = 0
STC_T3_KEYWORD = 0
STC_T3_NUMBER = 0
STC_T3_IDENTIFIER = 0
STC_T3_S_STRING = 0
STC_T3_D_STRING = 0
STC_T3_X_STRING = 0
STC_T3_LIB_DIRECTIVE = 0
STC_T3_MSG_PARAM = 0
STC_T3_HTML_TAG = 0
STC_T3_HTML_DEFAULT = 0
STC_T3_HTML_STRING = 0
STC_T3_USER1 = 0
STC_T3_USER2 = 0
STC_T3_USER3 = 0
STC_T3_BRACE = 0
STC_REBOL_DEFAULT = 0
STC_REBOL_COMMENTLINE = 0
STC_REBOL_COMMENTBLOCK = 0
STC_REBOL_PREFACE = 0
STC_REBOL_OPERATOR = 0
STC_REBOL_CHARACTER = 0
STC_REBOL_QUOTEDSTRING = 0
STC_REBOL_BRACEDSTRING = 0
STC_REBOL_NUMBER = 0
STC_REBOL_PAIR = 0
STC_REBOL_TUPLE = 0
STC_REBOL_BINARY = 0
STC_REBOL_MONEY = 0
STC_REBOL_ISSUE = 0
STC_REBOL_TAG = 0
STC_REBOL_FILE = 0
STC_REBOL_EMAIL = 0
STC_REBOL_URL = 0
STC_REBOL_DATE = 0
STC_REBOL_TIME = 0
STC_REBOL_IDENTIFIER = 0
STC_REBOL_WORD = 0
STC_REBOL_WORD2 = 0
STC_REBOL_WORD3 = 0
STC_REBOL_WORD4 = 0
STC_REBOL_WORD5 = 0
STC_REBOL_WORD6 = 0
STC_REBOL_WORD7 = 0
STC_REBOL_WORD8 = 0
STC_SQL_DEFAULT = 0
STC_SQL_COMMENT = 0
STC_SQL_COMMENTLINE = 0
STC_SQL_COMMENTDOC = 0
STC_SQL_NUMBER = 0
STC_SQL_WORD = 0
STC_SQL_STRING = 0
STC_SQL_CHARACTER = 0
STC_SQL_SQLPLUS = 0
STC_SQL_SQLPLUS_PROMPT = 0
STC_SQL_OPERATOR = 0
STC_SQL_IDENTIFIER = 0
STC_SQL_SQLPLUS_COMMENT = 0
STC_SQL_COMMENTLINEDOC = 0
STC_SQL_WORD2 = 0
STC_SQL_COMMENTDOCKEYWORD = 0
STC_SQL_COMMENTDOCKEYWORDERROR = 0
STC_SQL_USER1 = 0
STC_SQL_USER2 = 0
STC_SQL_USER3 = 0
STC_SQL_USER4 = 0
STC_SQL_QUOTEDIDENTIFIER = 0
STC_SQL_QOPERATOR = 0
STC_ST_DEFAULT = 0
STC_ST_STRING = 0
STC_ST_NUMBER = 0
STC_ST_COMMENT = 0
STC_ST_SYMBOL = 0
STC_ST_BINARY = 0
STC_ST_BOOL = 0
STC_ST_SELF = 0
STC_ST_SUPER = 0
STC_ST_NIL = 0
STC_ST_GLOBAL = 0
STC_ST_RETURN = 0
STC_ST_SPECIAL = 0
STC_ST_KWSEND = 0
STC_ST_ASSIGN = 0
STC_ST_CHARACTER = 0
STC_ST_SPEC_SEL = 0
STC_FS_DEFAULT = 0
STC_FS_COMMENT = 0
STC_FS_COMMENTLINE = 0
STC_FS_COMMENTDOC = 0
STC_FS_COMMENTLINEDOC = 0
STC_FS_COMMENTDOCKEYWORD = 0
STC_FS_COMMENTDOCKEYWORDERROR = 0
STC_FS_KEYWORD = 0
STC_FS_KEYWORD2 = 0
STC_FS_KEYWORD3 = 0
STC_FS_KEYWORD4 = 0
STC_FS_NUMBER = 0
STC_FS_STRING = 0
STC_FS_PREPROCESSOR = 0
STC_FS_OPERATOR = 0
STC_FS_IDENTIFIER = 0
STC_FS_DATE = 0
STC_FS_STRINGEOL = 0
STC_FS_CONSTANT = 0
STC_FS_WORDOPERATOR = 0
STC_FS_DISABLEDCODE = 0
STC_FS_DEFAULT_C = 0
STC_FS_COMMENTDOC_C = 0
STC_FS_COMMENTLINEDOC_C = 0
STC_FS_KEYWORD_C = 0
STC_FS_KEYWORD2_C = 0
STC_FS_NUMBER_C = 0
STC_FS_STRING_C = 0
STC_FS_PREPROCESSOR_C = 0
STC_FS_OPERATOR_C = 0
STC_FS_IDENTIFIER_C = 0
STC_FS_STRINGEOL_C = 0
STC_CSOUND_DEFAULT = 0
STC_CSOUND_COMMENT = 0
STC_CSOUND_NUMBER = 0
STC_CSOUND_OPERATOR = 0
STC_CSOUND_INSTR = 0
STC_CSOUND_IDENTIFIER = 0
STC_CSOUND_OPCODE = 0
STC_CSOUND_HEADERSTMT = 0
STC_CSOUND_USERKEYWORD = 0
STC_CSOUND_COMMENTBLOCK = 0
STC_CSOUND_PARAM = 0
STC_CSOUND_ARATE_VAR = 0
STC_CSOUND_KRATE_VAR = 0
STC_CSOUND_IRATE_VAR = 0
STC_CSOUND_GLOBAL_VAR = 0
STC_CSOUND_STRINGEOL = 0
STC_INNO_DEFAULT = 0
STC_INNO_COMMENT = 0
STC_INNO_KEYWORD = 0
STC_INNO_PARAMETER = 0
STC_INNO_SECTION = 0
STC_INNO_PREPROC = 0
STC_INNO_INLINE_EXPANSION = 0
STC_INNO_COMMENT_PASCAL = 0
STC_INNO_KEYWORD_PASCAL = 0
STC_INNO_KEYWORD_USER = 0
STC_INNO_STRING_DOUBLE = 0
STC_INNO_STRING_SINGLE = 0
STC_INNO_IDENTIFIER = 0
STC_OPAL_SPACE = 0
STC_OPAL_COMMENT_BLOCK = 0
STC_OPAL_COMMENT_LINE = 0
STC_OPAL_INTEGER = 0
STC_OPAL_KEYWORD = 0
STC_OPAL_SORT = 0
STC_OPAL_STRING = 0
STC_OPAL_PAR = 0
STC_OPAL_BOOL_CONST = 0
STC_OPAL_DEFAULT = 0
STC_SPICE_DEFAULT = 0
STC_SPICE_IDENTIFIER = 0
STC_SPICE_KEYWORD = 0
STC_SPICE_KEYWORD2 = 0
STC_SPICE_KEYWORD3 = 0
STC_SPICE_NUMBER = 0
STC_SPICE_DELIMITER = 0
STC_SPICE_VALUE = 0
STC_SPICE_COMMENTLINE = 0
STC_CMAKE_DEFAULT = 0
STC_CMAKE_COMMENT = 0
STC_CMAKE_STRINGDQ = 0
STC_CMAKE_STRINGLQ = 0
STC_CMAKE_STRINGRQ = 0
STC_CMAKE_COMMANDS = 0
STC_CMAKE_PARAMETERS = 0
STC_CMAKE_VARIABLE = 0
STC_CMAKE_USERDEFINED = 0
STC_CMAKE_WHILEDEF = 0
STC_CMAKE_FOREACHDEF = 0
STC_CMAKE_IFDEFINEDEF = 0
STC_CMAKE_MACRODEF = 0
STC_CMAKE_STRINGVAR = 0
STC_CMAKE_NUMBER = 0
STC_GAP_DEFAULT = 0
STC_GAP_IDENTIFIER = 0
STC_GAP_KEYWORD = 0
STC_GAP_KEYWORD2 = 0
STC_GAP_KEYWORD3 = 0
STC_GAP_KEYWORD4 = 0
STC_GAP_STRING = 0
STC_GAP_CHAR = 0
STC_GAP_OPERATOR = 0
STC_GAP_COMMENT = 0
STC_GAP_NUMBER = 0
STC_GAP_STRINGEOL = 0
STC_PLM_DEFAULT = 0
STC_PLM_COMMENT = 0
STC_PLM_STRING = 0
STC_PLM_NUMBER = 0
STC_PLM_IDENTIFIER = 0
STC_PLM_OPERATOR = 0
STC_PLM_CONTROL = 0
STC_PLM_KEYWORD = 0
STC_ABL_DEFAULT = 0
STC_ABL_NUMBER = 0
STC_ABL_WORD = 0
STC_ABL_STRING = 0
STC_ABL_CHARACTER = 0
STC_ABL_PREPROCESSOR = 0
STC_ABL_OPERATOR = 0
STC_ABL_IDENTIFIER = 0
STC_ABL_BLOCK = 0
STC_ABL_END = 0
STC_ABL_COMMENT = 0
STC_ABL_TASKMARKER = 0
STC_ABL_LINECOMMENT = 0
STC_ABAQUS_DEFAULT = 0
STC_ABAQUS_COMMENT = 0
STC_ABAQUS_COMMENTBLOCK = 0
STC_ABAQUS_NUMBER = 0
STC_ABAQUS_STRING = 0
STC_ABAQUS_OPERATOR = 0
STC_ABAQUS_WORD = 0
STC_ABAQUS_PROCESSOR = 0
STC_ABAQUS_COMMAND = 0
STC_ABAQUS_SLASHCOMMAND = 0
STC_ABAQUS_STARCOMMAND = 0
STC_ABAQUS_ARGUMENT = 0
STC_ABAQUS_FUNCTION = 0
STC_ASY_DEFAULT = 0
STC_ASY_COMMENT = 0
STC_ASY_COMMENTLINE = 0
STC_ASY_NUMBER = 0
STC_ASY_WORD = 0
STC_ASY_STRING = 0
STC_ASY_CHARACTER = 0
STC_ASY_OPERATOR = 0
STC_ASY_IDENTIFIER = 0
STC_ASY_STRINGEOL = 0
STC_ASY_COMMENTLINEDOC = 0
STC_ASY_WORD2 = 0
STC_R_DEFAULT = 0
STC_R_COMMENT = 0
STC_R_KWORD = 0
STC_R_BASEKWORD = 0
STC_R_OTHERKWORD = 0
STC_R_NUMBER = 0
STC_R_STRING = 0
STC_R_STRING2 = 0
STC_R_OPERATOR = 0
STC_R_IDENTIFIER = 0
STC_R_INFIX = 0
STC_R_INFIXEOL = 0
STC_MAGIK_DEFAULT = 0
STC_MAGIK_COMMENT = 0
STC_MAGIK_HYPER_COMMENT = 0
STC_MAGIK_STRING = 0
STC_MAGIK_CHARACTER = 0
STC_MAGIK_NUMBER = 0
STC_MAGIK_IDENTIFIER = 0
STC_MAGIK_OPERATOR = 0
STC_MAGIK_FLOW = 0
STC_MAGIK_CONTAINER = 0
STC_MAGIK_BRACKET_BLOCK = 0
STC_MAGIK_BRACE_BLOCK = 0
STC_MAGIK_SQBRACKET_BLOCK = 0
STC_MAGIK_UNKNOWN_KEYWORD = 0
STC_MAGIK_KEYWORD = 0
STC_MAGIK_PRAGMA = 0
STC_MAGIK_SYMBOL = 0
STC_POWERSHELL_DEFAULT = 0
STC_POWERSHELL_COMMENT = 0
STC_POWERSHELL_STRING = 0
STC_POWERSHELL_CHARACTER = 0
STC_POWERSHELL_NUMBER = 0
STC_POWERSHELL_VARIABLE = 0
STC_POWERSHELL_OPERATOR = 0
STC_POWERSHELL_IDENTIFIER = 0
STC_POWERSHELL_KEYWORD = 0
STC_POWERSHELL_CMDLET = 0
STC_POWERSHELL_ALIAS = 0
STC_POWERSHELL_FUNCTION = 0
STC_POWERSHELL_USER1 = 0
STC_POWERSHELL_COMMENTSTREAM = 0
STC_POWERSHELL_HERE_STRING = 0
STC_POWERSHELL_HERE_CHARACTER = 0
STC_POWERSHELL_COMMENTDOCKEYWORD = 0
STC_MYSQL_DEFAULT = 0
STC_MYSQL_COMMENT = 0
STC_MYSQL_COMMENTLINE = 0
STC_MYSQL_VARIABLE = 0
STC_MYSQL_SYSTEMVARIABLE = 0
STC_MYSQL_KNOWNSYSTEMVARIABLE = 0
STC_MYSQL_NUMBER = 0
STC_MYSQL_MAJORKEYWORD = 0
STC_MYSQL_KEYWORD = 0
STC_MYSQL_DATABASEOBJECT = 0
STC_MYSQL_PROCEDUREKEYWORD = 0
STC_MYSQL_STRING = 0
STC_MYSQL_SQSTRING = 0
STC_MYSQL_DQSTRING = 0
STC_MYSQL_OPERATOR = 0
STC_MYSQL_FUNCTION = 0
STC_MYSQL_IDENTIFIER = 0
STC_MYSQL_QUOTEDIDENTIFIER = 0
STC_MYSQL_USER1 = 0
STC_MYSQL_USER2 = 0
STC_MYSQL_USER3 = 0
STC_MYSQL_HIDDENCOMMAND = 0
STC_MYSQL_PLACEHOLDER = 0
STC_PO_DEFAULT = 0
STC_PO_COMMENT = 0
STC_PO_MSGID = 0
STC_PO_MSGID_TEXT = 0
STC_PO_MSGSTR = 0
STC_PO_MSGSTR_TEXT = 0
STC_PO_MSGCTXT = 0
STC_PO_MSGCTXT_TEXT = 0
STC_PO_FUZZY = 0
STC_PO_PROGRAMMER_COMMENT = 0
STC_PO_REFERENCE = 0
STC_PO_FLAGS = 0
STC_PO_MSGID_TEXT_EOL = 0
STC_PO_MSGSTR_TEXT_EOL = 0
STC_PO_MSGCTXT_TEXT_EOL = 0
STC_PO_ERROR = 0
STC_PAS_DEFAULT = 0
STC_PAS_IDENTIFIER = 0
STC_PAS_COMMENT = 0
STC_PAS_COMMENT2 = 0
STC_PAS_COMMENTLINE = 0
STC_PAS_PREPROCESSOR = 0
STC_PAS_PREPROCESSOR2 = 0
STC_PAS_NUMBER = 0
STC_PAS_HEXNUMBER = 0
STC_PAS_WORD = 0
STC_PAS_STRING = 0
STC_PAS_STRINGEOL = 0
STC_PAS_CHARACTER = 0
STC_PAS_OPERATOR = 0
STC_PAS_ASM = 0
STC_SORCUS_DEFAULT = 0
STC_SORCUS_COMMAND = 0
STC_SORCUS_PARAMETER = 0
STC_SORCUS_COMMENTLINE = 0
STC_SORCUS_STRING = 0
STC_SORCUS_STRINGEOL = 0
STC_SORCUS_IDENTIFIER = 0
STC_SORCUS_OPERATOR = 0
STC_SORCUS_NUMBER = 0
STC_SORCUS_CONSTANT = 0
STC_POWERPRO_DEFAULT = 0
STC_POWERPRO_COMMENTBLOCK = 0
STC_POWERPRO_COMMENTLINE = 0
STC_POWERPRO_NUMBER = 0
STC_POWERPRO_WORD = 0
STC_POWERPRO_WORD2 = 0
STC_POWERPRO_WORD3 = 0
STC_POWERPRO_WORD4 = 0
STC_POWERPRO_DOUBLEQUOTEDSTRING = 0
STC_POWERPRO_SINGLEQUOTEDSTRING = 0
STC_POWERPRO_LINECONTINUE = 0
STC_POWERPRO_OPERATOR = 0
STC_POWERPRO_IDENTIFIER = 0
STC_POWERPRO_STRINGEOL = 0
STC_POWERPRO_VERBATIM = 0
STC_POWERPRO_ALTQUOTE = 0
STC_POWERPRO_FUNCTION = 0
STC_SML_DEFAULT = 0
STC_SML_IDENTIFIER = 0
STC_SML_TAGNAME = 0
STC_SML_KEYWORD = 0
STC_SML_KEYWORD2 = 0
STC_SML_KEYWORD3 = 0
STC_SML_LINENUM = 0
STC_SML_OPERATOR = 0
STC_SML_NUMBER = 0
STC_SML_CHAR = 0
STC_SML_STRING = 0
STC_SML_COMMENT = 0
STC_SML_COMMENT1 = 0
STC_SML_COMMENT2 = 0
STC_SML_COMMENT3 = 0
STC_MARKDOWN_DEFAULT = 0
STC_MARKDOWN_LINE_BEGIN = 0
STC_MARKDOWN_STRONG1 = 0
STC_MARKDOWN_STRONG2 = 0
STC_MARKDOWN_EM1 = 0
STC_MARKDOWN_EM2 = 0
STC_MARKDOWN_HEADER1 = 0
STC_MARKDOWN_HEADER2 = 0
STC_MARKDOWN_HEADER3 = 0
STC_MARKDOWN_HEADER4 = 0
STC_MARKDOWN_HEADER5 = 0
STC_MARKDOWN_HEADER6 = 0
STC_MARKDOWN_PRECHAR = 0
STC_MARKDOWN_ULIST_ITEM = 0
STC_MARKDOWN_OLIST_ITEM = 0
STC_MARKDOWN_BLOCKQUOTE = 0
STC_MARKDOWN_STRIKEOUT = 0
STC_MARKDOWN_HRULE = 0
STC_MARKDOWN_LINK = 0
STC_MARKDOWN_CODE = 0
STC_MARKDOWN_CODE2 = 0
STC_MARKDOWN_CODEBK = 0
STC_TXT2TAGS_DEFAULT = 0
STC_TXT2TAGS_LINE_BEGIN = 0
STC_TXT2TAGS_STRONG1 = 0
STC_TXT2TAGS_STRONG2 = 0
STC_TXT2TAGS_EM1 = 0
STC_TXT2TAGS_EM2 = 0
STC_TXT2TAGS_HEADER1 = 0
STC_TXT2TAGS_HEADER2 = 0
STC_TXT2TAGS_HEADER3 = 0
STC_TXT2TAGS_HEADER4 = 0
STC_TXT2TAGS_HEADER5 = 0
STC_TXT2TAGS_HEADER6 = 0
STC_TXT2TAGS_PRECHAR = 0
STC_TXT2TAGS_ULIST_ITEM = 0
STC_TXT2TAGS_OLIST_ITEM = 0
STC_TXT2TAGS_BLOCKQUOTE = 0
STC_TXT2TAGS_STRIKEOUT = 0
STC_TXT2TAGS_HRULE = 0
STC_TXT2TAGS_LINK = 0
STC_TXT2TAGS_CODE = 0
STC_TXT2TAGS_CODE2 = 0
STC_TXT2TAGS_CODEBK = 0
STC_TXT2TAGS_COMMENT = 0
STC_TXT2TAGS_OPTION = 0
STC_TXT2TAGS_PREPROC = 0
STC_TXT2TAGS_POSTPROC = 0
STC_A68K_DEFAULT = 0
STC_A68K_COMMENT = 0
STC_A68K_NUMBER_DEC = 0
STC_A68K_NUMBER_BIN = 0
STC_A68K_NUMBER_HEX = 0
STC_A68K_STRING1 = 0
STC_A68K_OPERATOR = 0
STC_A68K_CPUINSTRUCTION = 0
STC_A68K_EXTINSTRUCTION = 0
STC_A68K_REGISTER = 0
STC_A68K_DIRECTIVE = 0
STC_A68K_MACRO_ARG = 0
STC_A68K_LABEL = 0
STC_A68K_STRING2 = 0
STC_A68K_IDENTIFIER = 0
STC_A68K_MACRO_DECLARATION = 0
STC_A68K_COMMENT_WORD = 0
STC_A68K_COMMENT_SPECIAL = 0
STC_A68K_COMMENT_DOXYGEN = 0
STC_MODULA_DEFAULT = 0
STC_MODULA_COMMENT = 0
STC_MODULA_DOXYCOMM = 0
STC_MODULA_DOXYKEY = 0
STC_MODULA_KEYWORD = 0
STC_MODULA_RESERVED = 0
STC_MODULA_NUMBER = 0
STC_MODULA_BASENUM = 0
STC_MODULA_FLOAT = 0
STC_MODULA_STRING = 0
STC_MODULA_STRSPEC = 0
STC_MODULA_CHAR = 0
STC_MODULA_CHARSPEC = 0
STC_MODULA_PROC = 0
STC_MODULA_PRAGMA = 0
STC_MODULA_PRGKEY = 0
STC_MODULA_OPERATOR = 0
STC_MODULA_BADSTR = 0
STC_COFFEESCRIPT_DEFAULT = 0
STC_COFFEESCRIPT_COMMENT = 0
STC_COFFEESCRIPT_COMMENTLINE = 0
STC_COFFEESCRIPT_COMMENTDOC = 0
STC_COFFEESCRIPT_NUMBER = 0
STC_COFFEESCRIPT_WORD = 0
STC_COFFEESCRIPT_STRING = 0
STC_COFFEESCRIPT_CHARACTER = 0
STC_COFFEESCRIPT_UUID = 0
STC_COFFEESCRIPT_PREPROCESSOR = 0
STC_COFFEESCRIPT_OPERATOR = 0
STC_COFFEESCRIPT_IDENTIFIER = 0
STC_COFFEESCRIPT_STRINGEOL = 0
STC_COFFEESCRIPT_VERBATIM = 0
STC_COFFEESCRIPT_REGEX = 0
STC_COFFEESCRIPT_COMMENTLINEDOC = 0
STC_COFFEESCRIPT_WORD2 = 0
STC_COFFEESCRIPT_COMMENTDOCKEYWORD = 0
STC_COFFEESCRIPT_COMMENTDOCKEYWORDERROR = 0
STC_COFFEESCRIPT_GLOBALCLASS = 0
STC_COFFEESCRIPT_STRINGRAW = 0
STC_COFFEESCRIPT_TRIPLEVERBATIM = 0
STC_COFFEESCRIPT_COMMENTBLOCK = 0
STC_COFFEESCRIPT_VERBOSE_REGEX = 0
STC_COFFEESCRIPT_VERBOSE_REGEX_COMMENT = 0
STC_COFFEESCRIPT_INSTANCEPROPERTY = 0
STC_AVS_DEFAULT = 0
STC_AVS_COMMENTBLOCK = 0
STC_AVS_COMMENTBLOCKN = 0
STC_AVS_COMMENTLINE = 0
STC_AVS_NUMBER = 0
STC_AVS_OPERATOR = 0
STC_AVS_IDENTIFIER = 0
STC_AVS_STRING = 0
STC_AVS_TRIPLESTRING = 0
STC_AVS_KEYWORD = 0
STC_AVS_FILTER = 0
STC_AVS_PLUGIN = 0
STC_AVS_FUNCTION = 0
STC_AVS_CLIPPROP = 0
STC_AVS_USERDFN = 0
STC_ECL_DEFAULT = 0
STC_ECL_COMMENT = 0
STC_ECL_COMMENTLINE = 0
STC_ECL_NUMBER = 0
STC_ECL_STRING = 0
STC_ECL_WORD0 = 0
STC_ECL_OPERATOR = 0
STC_ECL_CHARACTER = 0
STC_ECL_UUID = 0
STC_ECL_PREPROCESSOR = 0
STC_ECL_UNKNOWN = 0
STC_ECL_IDENTIFIER = 0
STC_ECL_STRINGEOL = 0
STC_ECL_VERBATIM = 0
STC_ECL_REGEX = 0
STC_ECL_COMMENTLINEDOC = 0
STC_ECL_WORD1 = 0
STC_ECL_COMMENTDOCKEYWORD = 0
STC_ECL_COMMENTDOCKEYWORDERROR = 0
STC_ECL_WORD2 = 0
STC_ECL_WORD3 = 0
STC_ECL_WORD4 = 0
STC_ECL_WORD5 = 0
STC_ECL_COMMENTDOC = 0
STC_ECL_ADDED = 0
STC_ECL_DELETED = 0
STC_ECL_CHANGED = 0
STC_ECL_MOVED = 0
STC_OSCRIPT_DEFAULT = 0
STC_OSCRIPT_LINE_COMMENT = 0
STC_OSCRIPT_BLOCK_COMMENT = 0
STC_OSCRIPT_DOC_COMMENT = 0
STC_OSCRIPT_PREPROCESSOR = 0
STC_OSCRIPT_NUMBER = 0
STC_OSCRIPT_SINGLEQUOTE_STRING = 0
STC_OSCRIPT_DOUBLEQUOTE_STRING = 0
STC_OSCRIPT_CONSTANT = 0
STC_OSCRIPT_IDENTIFIER = 0
STC_OSCRIPT_GLOBAL = 0
STC_OSCRIPT_KEYWORD = 0
STC_OSCRIPT_OPERATOR = 0
STC_OSCRIPT_LABEL = 0
STC_OSCRIPT_TYPE = 0
STC_OSCRIPT_FUNCTION = 0
STC_OSCRIPT_OBJECT = 0
STC_OSCRIPT_PROPERTY = 0
STC_OSCRIPT_METHOD = 0
STC_VISUALPROLOG_DEFAULT = 0
STC_VISUALPROLOG_KEY_MAJOR = 0
STC_VISUALPROLOG_KEY_MINOR = 0
STC_VISUALPROLOG_KEY_DIRECTIVE = 0
STC_VISUALPROLOG_COMMENT_BLOCK = 0
STC_VISUALPROLOG_COMMENT_LINE = 0
STC_VISUALPROLOG_COMMENT_KEY = 0
STC_VISUALPROLOG_COMMENT_KEY_ERROR = 0
STC_VISUALPROLOG_IDENTIFIER = 0
STC_VISUALPROLOG_VARIABLE = 0
STC_VISUALPROLOG_ANONYMOUS = 0
STC_VISUALPROLOG_NUMBER = 0
STC_VISUALPROLOG_OPERATOR = 0
STC_VISUALPROLOG_CHARACTER = 0
STC_VISUALPROLOG_CHARACTER_TOO_MANY = 0
STC_VISUALPROLOG_CHARACTER_ESCAPE_ERROR = 0
STC_VISUALPROLOG_STRING = 0
STC_VISUALPROLOG_STRING_ESCAPE = 0
STC_VISUALPROLOG_STRING_ESCAPE_ERROR = 0
STC_VISUALPROLOG_STRING_EOL_OPEN = 0
STC_VISUALPROLOG_STRING_VERBATIM = 0
STC_VISUALPROLOG_STRING_VERBATIM_SPECIAL = 0
STC_VISUALPROLOG_STRING_VERBATIM_EOL = 0
STC_STTXT_DEFAULT = 0
STC_STTXT_COMMENT = 0
STC_STTXT_COMMENTLINE = 0
STC_STTXT_KEYWORD = 0
STC_STTXT_TYPE = 0
STC_STTXT_FUNCTION = 0
STC_STTXT_FB = 0
STC_STTXT_NUMBER = 0
STC_STTXT_HEXNUMBER = 0
STC_STTXT_PRAGMA = 0
STC_STTXT_OPERATOR = 0
STC_STTXT_CHARACTER = 0
STC_STTXT_STRING1 = 0
STC_STTXT_STRING2 = 0
STC_STTXT_STRINGEOL = 0
STC_STTXT_IDENTIFIER = 0
STC_STTXT_DATETIME = 0
STC_STTXT_VARS = 0
STC_STTXT_PRAGMAS = 0
STC_KVIRC_DEFAULT = 0
STC_KVIRC_COMMENT = 0
STC_KVIRC_COMMENTBLOCK = 0
STC_KVIRC_STRING = 0
STC_KVIRC_WORD = 0
STC_KVIRC_KEYWORD = 0
STC_KVIRC_FUNCTION_KEYWORD = 0
STC_KVIRC_FUNCTION = 0
STC_KVIRC_VARIABLE = 0
STC_KVIRC_NUMBER = 0
STC_KVIRC_OPERATOR = 0
STC_KVIRC_STRING_FUNCTION = 0
STC_KVIRC_STRING_VARIABLE = 0
STC_RUST_DEFAULT = 0
STC_RUST_COMMENTBLOCK = 0
STC_RUST_COMMENTLINE = 0
STC_RUST_COMMENTBLOCKDOC = 0
STC_RUST_COMMENTLINEDOC = 0
STC_RUST_NUMBER = 0
STC_RUST_WORD = 0
STC_RUST_WORD2 = 0
STC_RUST_WORD3 = 0
STC_RUST_WORD4 = 0
STC_RUST_WORD5 = 0
STC_RUST_WORD6 = 0
STC_RUST_WORD7 = 0
STC_RUST_STRING = 0
STC_RUST_STRINGR = 0
STC_RUST_CHARACTER = 0
STC_RUST_OPERATOR = 0
STC_RUST_IDENTIFIER = 0
STC_RUST_LIFETIME = 0
STC_RUST_MACRO = 0
STC_RUST_LEXERROR = 0
STC_RUST_BYTESTRING = 0
STC_RUST_BYTESTRINGR = 0
STC_RUST_BYTECHARACTER = 0
STC_DMAP_DEFAULT = 0
STC_DMAP_COMMENT = 0
STC_DMAP_NUMBER = 0
STC_DMAP_STRING1 = 0
STC_DMAP_STRING2 = 0
STC_DMAP_STRINGEOL = 0
STC_DMAP_OPERATOR = 0
STC_DMAP_IDENTIFIER = 0
STC_DMAP_WORD = 0
STC_DMAP_WORD2 = 0
STC_DMAP_WORD3 = 0
STC_DMIS_DEFAULT = 0
STC_DMIS_COMMENT = 0
STC_DMIS_STRING = 0
STC_DMIS_NUMBER = 0
STC_DMIS_KEYWORD = 0
STC_DMIS_MAJORWORD = 0
STC_DMIS_MINORWORD = 0
STC_DMIS_UNSUPPORTED_MAJOR = 0
STC_DMIS_UNSUPPORTED_MINOR = 0
STC_DMIS_LABEL = 0
STC_REG_DEFAULT = 0
STC_REG_COMMENT = 0
STC_REG_VALUENAME = 0
STC_REG_STRING = 0
STC_REG_HEXDIGIT = 0
STC_REG_VALUETYPE = 0
STC_REG_ADDEDKEY = 0
STC_REG_DELETEDKEY = 0
STC_REG_ESCAPED = 0
STC_REG_KEYPATH_GUID = 0
STC_REG_STRING_GUID = 0
STC_REG_PARAMETER = 0
STC_REG_OPERATOR = 0
STC_BIBTEX_DEFAULT = 0
STC_BIBTEX_ENTRY = 0
STC_BIBTEX_UNKNOWN_ENTRY = 0
STC_BIBTEX_KEY = 0
STC_BIBTEX_PARAMETER = 0
STC_BIBTEX_VALUE = 0
STC_BIBTEX_COMMENT = 0
STC_HEX_DEFAULT = 0
STC_HEX_RECSTART = 0
STC_HEX_RECTYPE = 0
STC_HEX_RECTYPE_UNKNOWN = 0
STC_HEX_BYTECOUNT = 0
STC_HEX_BYTECOUNT_WRONG = 0
STC_HEX_NOADDRESS = 0
STC_HEX_DATAADDRESS = 0
STC_HEX_RECCOUNT = 0
STC_HEX_STARTADDRESS = 0
STC_HEX_ADDRESSFIELD_UNKNOWN = 0
STC_HEX_EXTENDEDADDRESS = 0
STC_HEX_DATA_ODD = 0
STC_HEX_DATA_EVEN = 0
STC_HEX_DATA_UNKNOWN = 0
STC_HEX_DATA_EMPTY = 0
STC_HEX_CHECKSUM = 0
STC_HEX_CHECKSUM_WRONG = 0
STC_HEX_GARBAGE = 0
STC_JSON_DEFAULT = 0
STC_JSON_NUMBER = 0
STC_JSON_STRING = 0
STC_JSON_STRINGEOL = 0
STC_JSON_PROPERTYNAME = 0
STC_JSON_ESCAPESEQUENCE = 0
STC_JSON_LINECOMMENT = 0
STC_JSON_BLOCKCOMMENT = 0
STC_JSON_OPERATOR = 0
STC_JSON_URI = 0
STC_JSON_COMPACTIRI = 0
STC_JSON_KEYWORD = 0
STC_JSON_LDKEYWORD = 0
STC_JSON_ERROR = 0
STC_EDI_DEFAULT = 0
STC_EDI_SEGMENTSTART = 0
STC_EDI_SEGMENTEND = 0
STC_EDI_SEP_ELEMENT = 0
STC_EDI_SEP_COMPOSITE = 0
STC_EDI_SEP_RELEASE = 0
STC_EDI_UNA = 0
STC_EDI_UNH = 0
STC_EDI_BADSEGMENT = 0
STC_INDIC0_MASK = 0
STC_INDIC1_MASK = 0
STC_INDIC2_MASK = 0
STC_INDICS_MASK = 0
STC_CMD_REDO = 0
STC_CMD_SELECTALL = 0
STC_CMD_UNDO = 0
STC_CMD_CUT = 0
STC_CMD_COPY = 0
STC_CMD_PASTE = 0
STC_CMD_CLEAR = 0
STC_CMD_LINEDOWN = 0
STC_CMD_LINEDOWNEXTEND = 0
STC_CMD_LINEUP = 0
STC_CMD_LINEUPEXTEND = 0
STC_CMD_CHARLEFT = 0
STC_CMD_CHARLEFTEXTEND = 0
STC_CMD_CHARRIGHT = 0
STC_CMD_CHARRIGHTEXTEND = 0
STC_CMD_WORDLEFT = 0
STC_CMD_WORDLEFTEXTEND = 0
STC_CMD_WORDRIGHT = 0
STC_CMD_WORDRIGHTEXTEND = 0
STC_CMD_HOME = 0
STC_CMD_HOMEEXTEND = 0
STC_CMD_LINEEND = 0
STC_CMD_LINEENDEXTEND = 0
STC_CMD_DOCUMENTSTART = 0
STC_CMD_DOCUMENTSTARTEXTEND = 0
STC_CMD_DOCUMENTEND = 0
STC_CMD_DOCUMENTENDEXTEND = 0
STC_CMD_PAGEUP = 0
STC_CMD_PAGEUPEXTEND = 0
STC_CMD_PAGEDOWN = 0
STC_CMD_PAGEDOWNEXTEND = 0
STC_CMD_EDITTOGGLEOVERTYPE = 0
STC_CMD_CANCEL = 0
STC_CMD_DELETEBACK = 0
STC_CMD_TAB = 0
STC_CMD_BACKTAB = 0
STC_CMD_NEWLINE = 0
STC_CMD_FORMFEED = 0
STC_CMD_VCHOME = 0
STC_CMD_VCHOMEEXTEND = 0
STC_CMD_ZOOMIN = 0
STC_CMD_ZOOMOUT = 0
STC_CMD_DELWORDLEFT = 0
STC_CMD_DELWORDRIGHT = 0
STC_CMD_DELWORDRIGHTEND = 0
STC_CMD_LINECUT = 0
STC_CMD_LINEDELETE = 0
STC_CMD_LINETRANSPOSE = 0
STC_CMD_LINEDUPLICATE = 0
STC_CMD_LOWERCASE = 0
STC_CMD_UPPERCASE = 0
STC_CMD_LINESCROLLDOWN = 0
STC_CMD_LINESCROLLUP = 0
STC_CMD_DELETEBACKNOTLINE = 0
STC_CMD_HOMEDISPLAY = 0
STC_CMD_HOMEDISPLAYEXTEND = 0
STC_CMD_LINEENDDISPLAY = 0
STC_CMD_LINEENDDISPLAYEXTEND = 0
STC_CMD_HOMEWRAP = 0
STC_CMD_HOMEWRAPEXTEND = 0
STC_CMD_LINEENDWRAP = 0
STC_CMD_LINEENDWRAPEXTEND = 0
STC_CMD_VCHOMEWRAP = 0
STC_CMD_VCHOMEWRAPEXTEND = 0
STC_CMD_LINECOPY = 0
STC_CMD_WORDPARTLEFT = 0
STC_CMD_WORDPARTLEFTEXTEND = 0
STC_CMD_WORDPARTRIGHT = 0
STC_CMD_WORDPARTRIGHTEXTEND = 0
STC_CMD_DELLINELEFT = 0
STC_CMD_DELLINERIGHT = 0
STC_CMD_PARADOWN = 0
STC_CMD_PARADOWNEXTEND = 0
STC_CMD_PARAUP = 0
STC_CMD_PARAUPEXTEND = 0
STC_CMD_LINEDOWNRECTEXTEND = 0
STC_CMD_LINEUPRECTEXTEND = 0
STC_CMD_CHARLEFTRECTEXTEND = 0
STC_CMD_CHARRIGHTRECTEXTEND = 0
STC_CMD_HOMERECTEXTEND = 0
STC_CMD_VCHOMERECTEXTEND = 0
STC_CMD_LINEENDRECTEXTEND = 0
STC_CMD_PAGEUPRECTEXTEND = 0
STC_CMD_PAGEDOWNRECTEXTEND = 0
STC_CMD_STUTTEREDPAGEUP = 0
STC_CMD_STUTTEREDPAGEUPEXTEND = 0
STC_CMD_STUTTEREDPAGEDOWN = 0
STC_CMD_STUTTEREDPAGEDOWNEXTEND = 0
STC_CMD_WORDLEFTEND = 0
STC_CMD_WORDLEFTENDEXTEND = 0
STC_CMD_WORDRIGHTEND = 0
STC_CMD_WORDRIGHTENDEXTEND = 0
STC_CMD_VERTICALCENTRECARET = 0
STC_CMD_MOVESELECTEDLINESUP = 0
STC_CMD_MOVESELECTEDLINESDOWN = 0
STC_CMD_SCROLLTOSTART = 0
STC_CMD_SCROLLTOEND = 0
STC_CMD_VCHOMEDISPLAY = 0
STC_CMD_VCHOMEDISPLAYEXTEND = 0
wxEVT_STC_CHANGE = 0
wxEVT_STC_STYLENEEDED = 0
wxEVT_STC_CHARADDED = 0
wxEVT_STC_SAVEPOINTREACHED = 0
wxEVT_STC_SAVEPOINTLEFT = 0
wxEVT_STC_ROMODIFYATTEMPT = 0
wxEVT_STC_KEY = 0
wxEVT_STC_DOUBLECLICK = 0
wxEVT_STC_UPDATEUI = 0
wxEVT_STC_MODIFIED = 0
wxEVT_STC_MACRORECORD = 0
wxEVT_STC_MARGINCLICK = 0
wxEVT_STC_NEEDSHOWN = 0
wxEVT_STC_PAINTED = 0
wxEVT_STC_USERLISTSELECTION = 0
wxEVT_STC_URIDROPPED = 0
wxEVT_STC_DWELLSTART = 0
wxEVT_STC_DWELLEND = 0
wxEVT_STC_START_DRAG = 0
wxEVT_STC_DRAG_OVER = 0
wxEVT_STC_DO_DROP = 0
wxEVT_STC_ZOOM = 0
wxEVT_STC_HOTSPOT_CLICK = 0
wxEVT_STC_HOTSPOT_DCLICK = 0
wxEVT_STC_CALLTIP_CLICK = 0
wxEVT_STC_AUTOCOMP_SELECTION = 0
wxEVT_STC_INDICATOR_CLICK = 0
wxEVT_STC_INDICATOR_RELEASE = 0
wxEVT_STC_AUTOCOMP_CANCELLED = 0
wxEVT_STC_AUTOCOMP_CHAR_DELETED = 0
wxEVT_STC_HOTSPOT_RELEASE_CLICK = 0
wxEVT_STC_CLIPBOARD_COPY = 0
wxEVT_STC_CLIPBOARD_PASTE = 0
wxEVT_STC_AUTOCOMP_COMPLETED = 0
wxEVT_STC_MARGIN_RIGHT_CLICK = 0
wxEVT_STC_AUTOCOMP_SELECTION_CHANGE = 0
STCNameStr = ""

class StyledTextCtrl(wx.Control, wx.TextEntry):
    """
    StyledTextCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr)
    StyledTextCtrl()
    
    A wxWidgets implementation of the Scintilla source code editing
    component.
    """

    def __init__(self, *args, **kw):
        """
        StyledTextCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr)
        StyledTextCtrl()
        
        A wxWidgets implementation of the Scintilla source code editing
        component.
        """

    def Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr):
        """
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr) -> bool
        
        Create the UI elements for a STC that was created with the default
        ctor.
        """

    def AddText(self, text):
        """
        AddText(text)
        
        Add text to the document at current position.
        """

    def AddStyledText(self, data):
        """
        AddStyledText(data)
        
        Add array of cells to document.
        """

    def InsertText(self, pos, text):
        """
        InsertText(pos, text)
        
        Insert string at a position.
        """

    def ChangeInsertion(self, length, text):
        """
        ChangeInsertion(length, text)
        
        Change the text that is being inserted in response to
        wxSTC_MOD_INSERTCHECK.
        """

    def ClearAll(self):
        """
        ClearAll()
        
        Delete all text in the document.
        """

    def DeleteRange(self, start, lengthDelete):
        """
        DeleteRange(start, lengthDelete)
        
        Delete a range of text in the document.
        """

    def ClearDocumentStyle(self):
        """
        ClearDocumentStyle()
        
        Set all style bytes to 0, remove all folding information.
        """

    def GetCharAt(self, pos):
        """
        GetCharAt(pos) -> int
        
        Returns the character byte at the position.
        """

    def GetStyleAt(self, pos):
        """
        GetStyleAt(pos) -> int
        
        Returns the style byte at the position.
        """

    def SetSavePoint(self):
        """
        SetSavePoint()
        
        Remember the current position in the undo history as the position at
        which the document was saved.
        """

    def GetStyledText(self, startPos, endPos):
        """
        GetStyledText(startPos, endPos) -> MemoryBuffer
        
        Retrieve a buffer of cells.
        """

    def GetReadOnly(self):
        """
        GetReadOnly() -> bool
        
        In read-only mode?
        """

    def GetLine(self, line):
        """
        GetLine(line) -> String
        
        Retrieve the contents of a line.
        """

    def GetTextRange(self, startPos, endPos):
        """
        GetTextRange(startPos, endPos) -> String
        
        Retrieve a range of text.
        """

    def ReplaceSelection(self, text):
        """
        ReplaceSelection(text)
        
        Replace the selected text with the argument text.
        """

    def SetReadOnly(self, readOnly):
        """
        SetReadOnly(readOnly)
        
        Set to read only or read write.
        """

    def SetText(self, text):
        """
        SetText(text)
        
        Replace the contents of the document with the argument text.
        """

    def GetText(self):
        """
        GetText() -> String
        
        Retrieve all the text in the document.
        """

    def AppendText(self, text):
        """
        AppendText(text)
        
        Append a string to the end of the document without changing the
        selection.
        """

    def Allocate(self, bytes):
        """
        Allocate(bytes)
        
        Enlarge the document to a particular size of text bytes.
        """

    def ReleaseAllExtendedStyles(self):
        """
        ReleaseAllExtendedStyles()
        
        Release all extended (>255) style numbers.
        """

    def AllocateExtendedStyles(self, numberStyles):
        """
        AllocateExtendedStyles(numberStyles) -> int
        
        Allocate some extended (>255) style numbers and return the start of
        the range.
        """

    def FindText(self, minPos, maxPos, text, flags=0):
        """
        FindText(minPos, maxPos, text, flags=0) -> (int, findEnd)
        
        Find some text in the document.
        """

    def SetTargetStart(self, start):
        """
        SetTargetStart(start)
        
        Sets the position that starts the target which is used for updating
        the document without affecting the scroll position.
        """

    def GetTargetStart(self):
        """
        GetTargetStart() -> int
        
        Get the position that starts the target.
        """

    def SetTargetEnd(self, end):
        """
        SetTargetEnd(end)
        
        Sets the position that ends the target which is used for updating the
        document without affecting the scroll position.
        """

    def GetTargetEnd(self):
        """
        GetTargetEnd() -> int
        
        Get the position that ends the target.
        """

    def SetTargetRange(self, start, end):
        """
        SetTargetRange(start, end)
        
        Sets both the start and end of the target in one call.
        """

    def GetTargetText(self):
        """
        GetTargetText() -> String
        
        Retrieve the text in the target.
        """

    def TargetFromSelection(self):
        """
        TargetFromSelection()
        
        Make the target range start and end be the same as the selection range
        start and end.
        """

    def TargetWholeDocument(self):
        """
        TargetWholeDocument()
        
        Sets the target to the whole document.
        """

    def ReplaceTarget(self, text):
        """
        ReplaceTarget(text) -> int
        
        Replace the target text with the argument text.
        """

    def ReplaceTargetRE(self, text):
        """
        ReplaceTargetRE(text) -> int
        
        Replace the target text with the argument text after \d processing.
        """

    def SearchInTarget(self, text):
        """
        SearchInTarget(text) -> int
        
        Search for a counted string in the target and set the target to the
        found range.
        """

    def SetSearchFlags(self, searchFlags):
        """
        SetSearchFlags(searchFlags)
        
        Set the search flags used by SearchInTarget.
        """

    def GetSearchFlags(self):
        """
        GetSearchFlags() -> int
        
        Get the search flags used by SearchInTarget.
        """

    def GetTag(self, tagNumber):
        """
        GetTag(tagNumber) -> String
        
        Retrieve the value of a tag from a regular expression search.
        """

    def SearchAnchor(self):
        """
        SearchAnchor()
        
        Sets the current caret position to be the search anchor.
        """

    def SearchNext(self, searchFlags, text):
        """
        SearchNext(searchFlags, text) -> int
        
        Find some text starting at the search anchor.
        """

    def SearchPrev(self, searchFlags, text):
        """
        SearchPrev(searchFlags, text) -> int
        
        Find some text starting at the search anchor and moving backwards.
        """

    def SetOvertype(self, overType):
        """
        SetOvertype(overType)
        
        Set to overtype (true) or insert mode.
        """

    def GetOvertype(self):
        """
        GetOvertype() -> bool
        
        Returns true if overtype mode is active otherwise false is returned.
        """

    def CanPaste(self):
        """
        CanPaste() -> bool
        
        Will a paste succeed?
        """

    def Cut(self):
        """
        Cut()
        
        Cut the selection to the clipboard.
        """

    def Copy(self):
        """
        Copy()
        
        Copy the selection to the clipboard.
        """

    def Paste(self):
        """
        Paste()
        
        Paste the contents of the clipboard into the document replacing the
        selection.
        """

    def Clear(self):
        """
        Clear()
        
        Clear the selection.
        """

    def CopyRange(self, start, end):
        """
        CopyRange(start, end)
        
        Copy a range of text to the clipboard.
        """

    def CopyText(self, length, text):
        """
        CopyText(length, text)
        
        Copy argument text to the clipboard.
        """

    def SetPasteConvertEndings(self, convert):
        """
        SetPasteConvertEndings(convert)
        
        Enable/Disable convert-on-paste for line endings.
        """

    def GetPasteConvertEndings(self):
        """
        GetPasteConvertEndings() -> bool
        
        Get convert-on-paste setting.
        """

    def CopyAllowLine(self):
        """
        CopyAllowLine()
        
        Copy the selection, if selection empty copy the line with the caret.
        """

    def SetStatus(self, status):
        """
        SetStatus(status)
        
        Change error status - 0 = OK.
        """

    def GetStatus(self):
        """
        GetStatus() -> int
        
        Get error status.
        """

    def Redo(self):
        """
        Redo()
        
        Redoes the next action on the undo history.
        """

    def SetUndoCollection(self, collectUndo):
        """
        SetUndoCollection(collectUndo)
        
        Choose between collecting actions into the undo history and discarding
        them.
        """

    def CanRedo(self):
        """
        CanRedo() -> bool
        
        Are there any redoable actions in the undo history?
        """

    def GetUndoCollection(self):
        """
        GetUndoCollection() -> bool
        
        Is undo history being collected?
        """

    def BeginUndoAction(self):
        """
        BeginUndoAction()
        
        Start a sequence of actions that is undone and redone as a unit.
        """

    def EndUndoAction(self):
        """
        EndUndoAction()
        
        End a sequence of actions that is undone and redone as a unit.
        """

    def CanUndo(self):
        """
        CanUndo() -> bool
        
        Are there any undoable actions in the undo history?
        """

    def EmptyUndoBuffer(self):
        """
        EmptyUndoBuffer()
        
        Delete the undo history.
        """

    def Undo(self):
        """
        Undo()
        
        Undo one action in the undo history.
        """

    def AddUndoAction(self, token, flags):
        """
        AddUndoAction(token, flags)
        
        Add a container action to the undo stack.
        """

    def GetLength(self):
        """
        GetLength() -> int
        
        Returns the number of bytes in the document.
        """

    def GetCurrentPos(self):
        """
        GetCurrentPos() -> int
        
        Returns the position of the caret.
        """

    def GetAnchor(self):
        """
        GetAnchor() -> int
        
        Returns the position of the opposite end of the selection to the
        caret.
        """

    def SelectAll(self):
        """
        SelectAll()
        
        Select all the text in the document.
        """

    def PositionFromPoint(self, pt):
        """
        PositionFromPoint(pt) -> int
        
        Find the position from a point within the window.
        """

    def PositionFromPointClose(self, x, y):
        """
        PositionFromPointClose(x, y) -> int
        
        Find the position from a point within the window but return
        wxSTC_INVALID_POSITION if not close to text.
        """

    def GotoLine(self, line):
        """
        GotoLine(line)
        
        Set caret to start of a line and ensure it is visible.
        """

    def GotoPos(self, caret):
        """
        GotoPos(caret)
        
        Set caret to a position and ensure it is visible.
        """

    def SetAnchor(self, anchor):
        """
        SetAnchor(anchor)
        
        Set the selection anchor to a position.
        """

    def GetCurLine(self):
        """
        GetCurLine() -> (String, linePos)
        
        Retrieve the text of the line containing the caret.
        """

    def GetColumn(self, pos):
        """
        GetColumn(pos) -> int
        
        Retrieve the column number of a position, taking tab width into
        account.
        """

    def CountCharacters(self, start, end):
        """
        CountCharacters(start, end) -> int
        
        Count characters between two positions.
        """

    def GetLineEndPosition(self, line):
        """
        GetLineEndPosition(line) -> int
        
        Get the position after the last visible characters on a line.
        """

    def SetCurrentPos(self, caret):
        """
        SetCurrentPos(caret)
        
        Sets the position of the caret.
        """

    def SetSelectionStart(self, anchor):
        """
        SetSelectionStart(anchor)
        
        Sets the position that starts the selection - this becomes the anchor.
        """

    def GetSelectionStart(self):
        """
        GetSelectionStart() -> int
        
        Returns the position at the start of the selection.
        """

    def SetSelectionEnd(self, caret):
        """
        SetSelectionEnd(caret)
        
        Sets the position that ends the selection - this becomes the caret.
        """

    def GetSelectionEnd(self):
        """
        GetSelectionEnd() -> int
        
        Returns the position at the end of the selection.
        """

    def SetEmptySelection(self, caret):
        """
        SetEmptySelection(caret)
        
        Set caret to a position, while removing any existing selection.
        """

    def GetLineCount(self):
        """
        GetLineCount() -> int
        
        Returns the number of lines in the document.
        """

    def GetModify(self):
        """
        GetModify() -> bool
        
        Is the document different from when it was last saved?
        """

    def GetSelectedText(self):
        """
        GetSelectedText() -> String
        
        Retrieve the selected text.
        """

    def HideSelection(self, hide):
        """
        HideSelection(hide)
        
        Draw the selection in normal style or with selection highlighted.
        """

    def PointFromPosition(self, pos):
        """
        PointFromPosition(pos) -> Point
        
        Retrieve the point in the window where a position is displayed.
        """

    def LineFromPosition(self, pos):
        """
        LineFromPosition(pos) -> int
        
        Retrieve the line containing a position.
        """

    def PositionFromLine(self, line):
        """
        PositionFromLine(line) -> int
        
        Retrieve the position at the start of a line.
        """

    def GetTextLength(self):
        """
        GetTextLength() -> int
        
        Retrieve the number of characters in the document.
        """

    def TextWidth(self, style, text):
        """
        TextWidth(style, text) -> int
        
        Measure the pixel width of some text in a particular style.
        """

    def TextHeight(self, line):
        """
        TextHeight(line) -> int
        
        Retrieve the height of a particular line of text in pixels.
        """

    def MoveCaretInsideView(self):
        """
        MoveCaretInsideView()
        
        Move the caret inside current view if it's not there already.
        """

    def LineLength(self, line):
        """
        LineLength(line) -> int
        
        How many characters are on a line, including end of line characters?
        """

    def LinesOnScreen(self):
        """
        LinesOnScreen() -> int
        
        Retrieves the number of lines completely visible.
        """

    def SelectionIsRectangle(self):
        """
        SelectionIsRectangle() -> bool
        
        Is the selection rectangular? The alternative is the more common
        stream selection.
        """

    def ChooseCaretX(self):
        """
        ChooseCaretX()
        
        Set the last x chosen value to be the caret x position.
        """

    def PositionBefore(self, pos):
        """
        PositionBefore(pos) -> int
        
        Given a valid document position, return the previous position taking
        code page into account.
        """

    def PositionAfter(self, pos):
        """
        PositionAfter(pos) -> int
        
        Given a valid document position, return the next position taking code
        page into account.
        """

    def PositionRelative(self, pos, relative):
        """
        PositionRelative(pos, relative) -> int
        
        Given a valid document position, return a position that differs in a
        number of characters.
        """

    def SetSelectionMode(self, selectionMode):
        """
        SetSelectionMode(selectionMode)
        
        Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular
        (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES).
        """

    def GetSelectionMode(self):
        """
        GetSelectionMode() -> int
        
        Get the mode of the current selection.
        """

    def GetLineSelStartPosition(self, line):
        """
        GetLineSelStartPosition(line) -> int
        
        Retrieve the position of the start of the selection at the given line
        (wxSTC_INVALID_POSITION if no selection on this line).
        """

    def GetLineSelEndPosition(self, line):
        """
        GetLineSelEndPosition(line) -> int
        
        Retrieve the position of the end of the selection at the given line
        (wxSTC_INVALID_POSITION if no selection on this line).
        """

    def FindColumn(self, line, column):
        """
        FindColumn(line, column) -> int
        
        Find the position of a column on a line taking into account tabs and
        multi-byte characters.
        """

    def CharPositionFromPoint(self, x, y):
        """
        CharPositionFromPoint(x, y) -> int
        
        Find the position of a character from a point within the window.
        """

    def CharPositionFromPointClose(self, x, y):
        """
        CharPositionFromPointClose(x, y) -> int
        
        Find the position of a character from a point within the window.
        """

    def SetMouseSelectionRectangularSwitch(self, mouseSelectionRectangularSwitch):
        """
        SetMouseSelectionRectangularSwitch(mouseSelectionRectangularSwitch)
        
        Set whether switching to rectangular mode while selecting with the
        mouse is allowed.
        """

    def GetMouseSelectionRectangularSwitch(self):
        """
        GetMouseSelectionRectangularSwitch() -> bool
        
        Whether switching to rectangular mode while selecting with the mouse
        is allowed.
        """

    def MoveSelectedLinesUp(self):
        """
        MoveSelectedLinesUp()
        
        Move the selected lines up one line, shifting the line above after the
        selection.
        """

    def MoveSelectedLinesDown(self):
        """
        MoveSelectedLinesDown()
        
        Move the selected lines down one line, shifting the line below before
        the selection.
        """

    def SetMultiPaste(self, multiPaste):
        """
        SetMultiPaste(multiPaste)
        
        Change the effect of pasting when there are multiple selections.
        """

    def GetMultiPaste(self):
        """
        GetMultiPaste() -> int
        
        Retrieve the effect of pasting when there are multiple selections.
        """

    def SetMultipleSelection(self, multipleSelection):
        """
        SetMultipleSelection(multipleSelection)
        
        Set whether multiple selections can be made.
        """

    def GetMultipleSelection(self):
        """
        GetMultipleSelection() -> bool
        
        Whether multiple selections can be made.
        """

    def SetAdditionalSelectionTyping(self, additionalSelectionTyping):
        """
        SetAdditionalSelectionTyping(additionalSelectionTyping)
        
        Set whether typing can be performed into multiple selections.
        """

    def GetAdditionalSelectionTyping(self):
        """
        GetAdditionalSelectionTyping() -> bool
        
        Whether typing can be performed into multiple selections.
        """

    def SetAdditionalCaretsBlink(self, additionalCaretsBlink):
        """
        SetAdditionalCaretsBlink(additionalCaretsBlink)
        
        Set whether additional carets will blink.
        """

    def GetAdditionalCaretsBlink(self):
        """
        GetAdditionalCaretsBlink() -> bool
        
        Whether additional carets will blink.
        """

    def SetAdditionalCaretsVisible(self, additionalCaretsVisible):
        """
        SetAdditionalCaretsVisible(additionalCaretsVisible)
        
        Set whether additional carets are visible.
        """

    def GetAdditionalCaretsVisible(self):
        """
        GetAdditionalCaretsVisible() -> bool
        
        Whether additional carets are visible.
        """

    def GetSelections(self):
        """
        GetSelections() -> int
        
        How many selections are there?
        """

    def GetSelectionEmpty(self):
        """
        GetSelectionEmpty() -> bool
        
        Is every selected range empty?
        """

    def ClearSelections(self):
        """
        ClearSelections()
        
        Clear selections to a single empty stream selection.
        """

    def AddSelection(self, caret, anchor):
        """
        AddSelection(caret, anchor) -> int
        
        Add a selection.
        """

    def DropSelectionN(self, selection):
        """
        DropSelectionN(selection)
        
        Drop one selection.
        """

    def SetMainSelection(self, selection):
        """
        SetMainSelection(selection)
        
        Set the main selection.
        """

    def GetMainSelection(self):
        """
        GetMainSelection() -> int
        
        Which selection is the main selection.
        """

    def SetSelectionNCaret(self, selection, caret):
        """
        SetSelectionNCaret(selection, caret)
        
        Set the caret position of the nth selection.
        """

    def GetSelectionNCaret(self, selection):
        """
        GetSelectionNCaret(selection) -> int
        
        Return the caret position of the nth selection.
        """

    def SetSelectionNAnchor(self, selection, anchor):
        """
        SetSelectionNAnchor(selection, anchor)
        
        Set the anchor position of the nth selection.
        """

    def GetSelectionNAnchor(self, selection):
        """
        GetSelectionNAnchor(selection) -> int
        
        Return the anchor position of the nth selection.
        """

    def SetSelectionNCaretVirtualSpace(self, selection, space):
        """
        SetSelectionNCaretVirtualSpace(selection, space)
        
        Set the virtual space of the caret of the nth selection.
        """

    def GetSelectionNCaretVirtualSpace(self, selection):
        """
        GetSelectionNCaretVirtualSpace(selection) -> int
        
        Return the virtual space of the caret of the nth selection.
        """

    def SetSelectionNAnchorVirtualSpace(self, selection, space):
        """
        SetSelectionNAnchorVirtualSpace(selection, space)
        
        Set the virtual space of the anchor of the nth selection.
        """

    def GetSelectionNAnchorVirtualSpace(self, selection):
        """
        GetSelectionNAnchorVirtualSpace(selection) -> int
        
        Return the virtual space of the anchor of the nth selection.
        """

    def SetSelectionNStart(self, selection, anchor):
        """
        SetSelectionNStart(selection, anchor)
        
        Sets the position that starts the selection - this becomes the anchor.
        """

    def GetSelectionNStart(self, selection):
        """
        GetSelectionNStart(selection) -> int
        
        Returns the position at the start of the selection.
        """

    def SetSelectionNEnd(self, selection, caret):
        """
        SetSelectionNEnd(selection, caret)
        
        Sets the position that ends the selection - this becomes the
        currentPosition.
        """

    def GetSelectionNEnd(self, selection):
        """
        GetSelectionNEnd(selection) -> int
        
        Returns the position at the end of the selection.
        """

    def SetRectangularSelectionCaret(self, caret):
        """
        SetRectangularSelectionCaret(caret)
        
        Set the caret position of the rectangular selection.
        """

    def GetRectangularSelectionCaret(self):
        """
        GetRectangularSelectionCaret() -> int
        
        Return the caret position of the rectangular selection.
        """

    def SetRectangularSelectionAnchor(self, anchor):
        """
        SetRectangularSelectionAnchor(anchor)
        
        Set the anchor position of the rectangular selection.
        """

    def GetRectangularSelectionAnchor(self):
        """
        GetRectangularSelectionAnchor() -> int
        
        Return the anchor position of the rectangular selection.
        """

    def SetRectangularSelectionCaretVirtualSpace(self, space):
        """
        SetRectangularSelectionCaretVirtualSpace(space)
        
        Set the virtual space of the caret of the rectangular selection.
        """

    def GetRectangularSelectionCaretVirtualSpace(self):
        """
        GetRectangularSelectionCaretVirtualSpace() -> int
        
        Return the virtual space of the caret of the rectangular selection.
        """

    def SetRectangularSelectionAnchorVirtualSpace(self, space):
        """
        SetRectangularSelectionAnchorVirtualSpace(space)
        
        Set the virtual space of the anchor of the rectangular selection.
        """

    def GetRectangularSelectionAnchorVirtualSpace(self):
        """
        GetRectangularSelectionAnchorVirtualSpace() -> int
        
        Return the virtual space of the anchor of the rectangular selection.
        """

    def SetVirtualSpaceOptions(self, virtualSpaceOptions):
        """
        SetVirtualSpaceOptions(virtualSpaceOptions)
        
        Set options for virtual space behaviour.
        """

    def GetVirtualSpaceOptions(self):
        """
        GetVirtualSpaceOptions() -> int
        
        Return options for virtual space behaviour.
        """

    def SetRectangularSelectionModifier(self, modifier):
        """
        SetRectangularSelectionModifier(modifier)
        
        On GTK+, allow selecting the modifier key to use for mouse-based
        rectangular selection.
        """

    def GetRectangularSelectionModifier(self):
        """
        GetRectangularSelectionModifier() -> int
        
        Get the modifier key used for rectangular selection.
        """

    def SetAdditionalSelForeground(self, fore):
        """
        SetAdditionalSelForeground(fore)
        
        Set the foreground colour of additional selections.
        """

    def SetAdditionalSelBackground(self, back):
        """
        SetAdditionalSelBackground(back)
        
        Set the background colour of additional selections.
        """

    def SetAdditionalSelAlpha(self, alpha):
        """
        SetAdditionalSelAlpha(alpha)
        
        Set the alpha of the selection.
        """

    def GetAdditionalSelAlpha(self):
        """
        GetAdditionalSelAlpha() -> int
        
        Get the alpha of the selection.
        """

    def SetAdditionalCaretForeground(self, fore):
        """
        SetAdditionalCaretForeground(fore)
        
        Set the foreground colour of additional carets.
        """

    def GetAdditionalCaretForeground(self):
        """
        GetAdditionalCaretForeground() -> Colour
        
        Get the foreground colour of additional carets.
        """

    def RotateSelection(self):
        """
        RotateSelection()
        
        Set the main selection to the next selection.
        """

    def SwapMainAnchorCaret(self):
        """
        SwapMainAnchorCaret()
        
        Swap that caret and anchor of the main selection.
        """

    def MultipleSelectAddNext(self):
        """
        MultipleSelectAddNext()
        
        Add the next occurrence of the main selection to the set of selections
        as main.
        """

    def MultipleSelectAddEach(self):
        """
        MultipleSelectAddEach()
        
        Add each occurrence of the main selection in the target to the set of
        selections.
        """

    def SetUseHorizontalScrollBar(self, visible):
        """
        SetUseHorizontalScrollBar(visible)
        
        Show or hide the horizontal scroll bar.
        """

    def GetUseHorizontalScrollBar(self):
        """
        GetUseHorizontalScrollBar() -> bool
        
        Is the horizontal scroll bar visible?
        """

    def GetFirstVisibleLine(self):
        """
        GetFirstVisibleLine() -> int
        
        Retrieve the display line at the top of the display.
        """

    def LineScroll(self, columns, lines):
        """
        LineScroll(columns, lines)
        
        Scroll horizontally and vertically.
        """

    def EnsureCaretVisible(self):
        """
        EnsureCaretVisible()
        
        Ensure the caret is visible.
        """

    def ScrollRange(self, secondary, primary):
        """
        ScrollRange(secondary, primary)
        
        Scroll the argument positions and the range between them into view
        giving priority to the primary position then the secondary position.
        """

    def SetScrollWidth(self, pixelWidth):
        """
        SetScrollWidth(pixelWidth)
        
        Sets the document width assumed for scrolling.
        """

    def GetScrollWidth(self):
        """
        GetScrollWidth() -> int
        
        Retrieve the document width assumed for scrolling.
        """

    def SetScrollWidthTracking(self, tracking):
        """
        SetScrollWidthTracking(tracking)
        
        Sets whether the maximum width line displayed is used to set scroll
        width.
        """

    def GetScrollWidthTracking(self):
        """
        GetScrollWidthTracking() -> bool
        
        Retrieve whether the scroll width tracks wide lines.
        """

    def SetEndAtLastLine(self, endAtLastLine):
        """
        SetEndAtLastLine(endAtLastLine)
        
        Sets the scroll range so that maximum scroll position has the last
        line at the bottom of the view (default).
        """

    def GetEndAtLastLine(self):
        """
        GetEndAtLastLine() -> bool
        
        Retrieve whether the maximum scroll position has the last line at the
        bottom of the view.
        """

    def SetUseVerticalScrollBar(self, visible):
        """
        SetUseVerticalScrollBar(visible)
        
        Show or hide the vertical scroll bar.
        """

    def GetUseVerticalScrollBar(self):
        """
        GetUseVerticalScrollBar() -> bool
        
        Is the vertical scroll bar visible?
        """

    def SetFirstVisibleLine(self, displayLine):
        """
        SetFirstVisibleLine(displayLine)
        
        Scroll so that a display line is at the top of the display.
        """

    def SetVisiblePolicy(self, visiblePolicy, visibleSlop):
        """
        SetVisiblePolicy(visiblePolicy, visibleSlop)
        
        Set the way the display area is determined when a particular line is
        to be moved to by Find, FindNext, GotoLine, etc.
        """

    def SetXOffset(self, xOffset):
        """
        SetXOffset(xOffset)
        
        Set the xOffset (ie, horizontal scroll position).
        """

    def GetXOffset(self):
        """
        GetXOffset() -> int
        
        Get the xOffset (ie, horizontal scroll position).
        """

    def SetXCaretPolicy(self, caretPolicy, caretSlop):
        """
        SetXCaretPolicy(caretPolicy, caretSlop)
        
        Set the way the caret is kept visible when going sideways.
        """

    def SetYCaretPolicy(self, caretPolicy, caretSlop):
        """
        SetYCaretPolicy(caretPolicy, caretSlop)
        
        Set the way the line the caret is on is kept visible.
        """

    def GetViewWhiteSpace(self):
        """
        GetViewWhiteSpace() -> int
        
        Are white space characters currently visible? Returns one of
        wxSTC_WS_* constants.
        """

    def SetViewWhiteSpace(self, viewWS):
        """
        SetViewWhiteSpace(viewWS)
        
        Make white space characters invisible, always visible or visible
        outside indentation.
        """

    def GetTabDrawMode(self):
        """
        GetTabDrawMode() -> int
        
        Retrieve the current tab draw mode.
        """

    def SetTabDrawMode(self, tabDrawMode):
        """
        SetTabDrawMode(tabDrawMode)
        
        Set how tabs are drawn when visible.
        """

    def SetWhitespaceForeground(self, useSetting, fore):
        """
        SetWhitespaceForeground(useSetting, fore)
        
        Set the foreground colour of all whitespace and whether to use this
        setting.
        """

    def SetWhitespaceBackground(self, useSetting, back):
        """
        SetWhitespaceBackground(useSetting, back)
        
        Set the background colour of all whitespace and whether to use this
        setting.
        """

    def SetWhitespaceSize(self, size):
        """
        SetWhitespaceSize(size)
        
        Set the size of the dots used to mark space characters.
        """

    def GetWhitespaceSize(self):
        """
        GetWhitespaceSize() -> int
        
        Get the size of the dots used to mark space characters.
        """

    def SetExtraAscent(self, extraAscent):
        """
        SetExtraAscent(extraAscent)
        
        Set extra ascent for each line.
        """

    def GetExtraAscent(self):
        """
        GetExtraAscent() -> int
        
        Get extra ascent for each line.
        """

    def SetExtraDescent(self, extraDescent):
        """
        SetExtraDescent(extraDescent)
        
        Set extra descent for each line.
        """

    def GetExtraDescent(self):
        """
        GetExtraDescent() -> int
        
        Get extra descent for each line.
        """

    def SetSTCCursor(self, cursorType):
        """
        SetSTCCursor(cursorType)
        
        Sets the cursor to one of the wxSTC_CURSOR* values.
        """

    def GetSTCCursor(self):
        """
        GetSTCCursor() -> int
        
        Get cursor type.
        """

    def SetMouseDownCaptures(self, captures):
        """
        SetMouseDownCaptures(captures)
        
        Set whether the mouse is captured when its button is pressed.
        """

    def GetMouseDownCaptures(self):
        """
        GetMouseDownCaptures() -> bool
        
        Get whether mouse gets captured.
        """

    def SetMouseWheelCaptures(self, captures):
        """
        SetMouseWheelCaptures(captures)
        
        Set whether the mouse wheel can be active outside the window.
        """

    def GetMouseWheelCaptures(self):
        """
        GetMouseWheelCaptures() -> bool
        
        Get whether mouse wheel can be active outside the window.
        """

    def ConvertEOLs(self, eolMode):
        """
        ConvertEOLs(eolMode)
        
        Convert all line endings in the document to one mode.
        """

    def GetEOLMode(self):
        """
        GetEOLMode() -> int
        
        Retrieve the current end of line mode - one of wxSTC_EOL_CRLF,
        wxSTC_EOL_CR, or wxSTC_EOL_LF.
        """

    def SetEOLMode(self, eolMode):
        """
        SetEOLMode(eolMode)
        
        Set the current end of line mode.
        """

    def GetViewEOL(self):
        """
        GetViewEOL() -> bool
        
        Are the end of line characters visible?
        """

    def SetViewEOL(self, visible):
        """
        SetViewEOL(visible)
        
        Make the end of line characters visible or invisible.
        """

    def SetLineEndTypesAllowed(self, lineEndBitSet):
        """
        SetLineEndTypesAllowed(lineEndBitSet)
        
        Set the line end types that the application wants to use.
        """

    def GetLineEndTypesAllowed(self):
        """
        GetLineEndTypesAllowed() -> int
        
        Get the line end types currently allowed.
        """

    def GetLineEndTypesActive(self):
        """
        GetLineEndTypesActive() -> int
        
        Get the line end types currently recognised.
        """

    def GetLineEndTypesSupported(self):
        """
        GetLineEndTypesSupported() -> int
        
        Bit set of LineEndType enumertion for which line ends beyond the
        standard LF, CR, and CRLF are supported by the lexer.
        """

    def SetWordChars(self, characters):
        """
        SetWordChars(characters)
        
        Set the set of characters making up words for when moving or selecting
        by word.
        """

    def GetWordChars(self):
        """
        GetWordChars() -> String
        
        Get the set of characters making up words for when moving or selecting
        by word.
        """

    def WordStartPosition(self, pos, onlyWordCharacters):
        """
        WordStartPosition(pos, onlyWordCharacters) -> int
        
        Get position of start of word.
        """

    def WordEndPosition(self, pos, onlyWordCharacters):
        """
        WordEndPosition(pos, onlyWordCharacters) -> int
        
        Get position of end of word.
        """

    def IsRangeWord(self, start, end):
        """
        IsRangeWord(start, end) -> bool
        
        Is the range start..end considered a word?
        """

    def SetWhitespaceChars(self, characters):
        """
        SetWhitespaceChars(characters)
        
        Set the set of characters making up whitespace for when moving or
        selecting by word.
        """

    def GetWhitespaceChars(self):
        """
        GetWhitespaceChars() -> String
        
        Get the set of characters making up whitespace for when moving or
        selecting by word.
        """

    def SetPunctuationChars(self, characters):
        """
        SetPunctuationChars(characters)
        
        Set the set of characters making up punctuation characters Should be
        called after SetWordChars.
        """

    def GetPunctuationChars(self):
        """
        GetPunctuationChars() -> String
        
        Get the set of characters making up punctuation characters.
        """

    def SetCharsDefault(self):
        """
        SetCharsDefault()
        
        Reset the set of characters for whitespace and word characters to the
        defaults.
        """

    def GetEndStyled(self):
        """
        GetEndStyled() -> int
        
        Retrieve the position of the last correctly styled character.
        """

    def StartStyling(self, start):
        """
        StartStyling(start)
        
        Set the current styling position to start.
        """

    def SetStyling(self, length, style):
        """
        SetStyling(length, style)
        
        Change style from current styling position for length characters to a
        style and move the current styling position to after this newly styled
        segment.
        """

    def SetStyleBytes(self, length, styleBytes):
        """
        SetStyleBytes(length, styleBytes)
        
        Set the styles for a segment of the document.
        """

    def SetLineState(self, line, state):
        """
        SetLineState(line, state)
        
        Used to hold extra styling information for each line.
        """

    def GetLineState(self, line):
        """
        GetLineState(line) -> int
        
        Retrieve the extra styling information for a line.
        """

    def GetMaxLineState(self):
        """
        GetMaxLineState() -> int
        
        Retrieve the last line number that has line state.
        """

    def SetIdleStyling(self, idleStyling):
        """
        SetIdleStyling(idleStyling)
        
        Sets limits to idle styling.
        """

    def GetIdleStyling(self):
        """
        GetIdleStyling() -> int
        
        Retrieve the limits to idle styling.
        """

    def StyleClearAll(self):
        """
        StyleClearAll()
        
        Clear all the styles and make equivalent to the global default style.
        """

    def StyleSetForeground(self, style, fore):
        """
        StyleSetForeground(style, fore)
        
        Set the foreground colour of a style.
        """

    def StyleSetBackground(self, style, back):
        """
        StyleSetBackground(style, back)
        
        Set the background colour of a style.
        """

    def StyleSetBold(self, style, bold):
        """
        StyleSetBold(style, bold)
        
        Set a style to be bold or not.
        """

    def StyleSetItalic(self, style, italic):
        """
        StyleSetItalic(style, italic)
        
        Set a style to be italic or not.
        """

    def StyleSetSize(self, style, sizePoints):
        """
        StyleSetSize(style, sizePoints)
        
        Set the size of characters of a style.
        """

    def StyleSetFaceName(self, style, fontName):
        """
        StyleSetFaceName(style, fontName)
        
        Set the font of a style.
        """

    def StyleSetEOLFilled(self, style, eolFilled):
        """
        StyleSetEOLFilled(style, eolFilled)
        
        Set a style to have its end of line filled or not.
        """

    def StyleResetDefault(self):
        """
        StyleResetDefault()
        
        Reset the default style to its state at startup.
        """

    def StyleSetUnderline(self, style, underline):
        """
        StyleSetUnderline(style, underline)
        
        Set a style to be underlined or not.
        """

    def StyleGetForeground(self, style):
        """
        StyleGetForeground(style) -> Colour
        
        Get the foreground colour of a style.
        """

    def StyleGetBackground(self, style):
        """
        StyleGetBackground(style) -> Colour
        
        Get the background colour of a style.
        """

    def StyleGetBold(self, style):
        """
        StyleGetBold(style) -> bool
        
        Get is a style bold or not.
        """

    def StyleGetItalic(self, style):
        """
        StyleGetItalic(style) -> bool
        
        Get is a style italic or not.
        """

    def StyleGetSize(self, style):
        """
        StyleGetSize(style) -> int
        
        Get the size of characters of a style.
        """

    def StyleGetFaceName(self, style):
        """
        StyleGetFaceName(style) -> String
        
        Get the font facename of a style.
        """

    def StyleGetEOLFilled(self, style):
        """
        StyleGetEOLFilled(style) -> bool
        
        Get is a style to have its end of line filled or not.
        """

    def StyleGetUnderline(self, style):
        """
        StyleGetUnderline(style) -> bool
        
        Get is a style underlined or not.
        """

    def StyleGetCase(self, style):
        """
        StyleGetCase(style) -> int
        
        Get is a style mixed case, or to force upper or lower case.
        """

    def StyleGetCharacterSet(self, style):
        """
        StyleGetCharacterSet(style) -> int
        
        Get the character get of the font in a style.
        """

    def StyleGetVisible(self, style):
        """
        StyleGetVisible(style) -> bool
        
        Get is a style visible or not.
        """

    def StyleGetChangeable(self, style):
        """
        StyleGetChangeable(style) -> bool
        
        Get is a style changeable or not (read only).
        """

    def StyleGetHotSpot(self, style):
        """
        StyleGetHotSpot(style) -> bool
        
        Get is a style a hotspot or not.
        """

    def StyleSetCase(self, style, caseVisible):
        """
        StyleSetCase(style, caseVisible)
        
        Set a style to be mixed case, or to force upper or lower case.
        """

    def StyleSetSizeFractional(self, style, sizeHundredthPoints):
        """
        StyleSetSizeFractional(style, sizeHundredthPoints)
        
        Set the size of characters of a style.
        """

    def StyleGetSizeFractional(self, style):
        """
        StyleGetSizeFractional(style) -> int
        
        Get the size of characters of a style in points multiplied by 100.
        """

    def StyleSetWeight(self, style, weight):
        """
        StyleSetWeight(style, weight)
        
        Set the weight of characters of a style.
        """

    def StyleGetWeight(self, style):
        """
        StyleGetWeight(style) -> int
        
        Get the weight of characters of a style.
        """

    def StyleSetCharacterSet(self, style, characterSet):
        """
        StyleSetCharacterSet(style, characterSet)
        
        Set the character set of the font in a style.
        """

    def StyleSetHotSpot(self, style, hotspot):
        """
        StyleSetHotSpot(style, hotspot)
        
        Set a style to be a hotspot or not.
        """

    def StyleSetVisible(self, style, visible):
        """
        StyleSetVisible(style, visible)
        
        Set a style to be visible or not.
        """

    def StyleSetChangeable(self, style, changeable):
        """
        StyleSetChangeable(style, changeable)
        
        Set a style to be changeable or not (read only).
        """

    def SetSelForeground(self, useSetting, fore):
        """
        SetSelForeground(useSetting, fore)
        
        Set the foreground colour of the main and additional selections and
        whether to use this setting.
        """

    def SetSelBackground(self, useSetting, back):
        """
        SetSelBackground(useSetting, back)
        
        Set the background colour of the main and additional selections and
        whether to use this setting.
        """

    def GetSelAlpha(self):
        """
        GetSelAlpha() -> int
        
        Get the alpha of the selection.
        """

    def SetSelAlpha(self, alpha):
        """
        SetSelAlpha(alpha)
        
        Set the alpha of the selection.
        """

    def GetSelEOLFilled(self):
        """
        GetSelEOLFilled() -> bool
        
        Is the selection end of line filled?
        """

    def SetSelEOLFilled(self, filled):
        """
        SetSelEOLFilled(filled)
        
        Set the selection to have its end of line filled or not.
        """

    def SetCaretForeground(self, fore):
        """
        SetCaretForeground(fore)
        
        Set the foreground colour of the caret.
        """

    def GetCaretPeriod(self):
        """
        GetCaretPeriod() -> int
        
        Get the time in milliseconds that the caret is on and off.
        """

    def SetCaretPeriod(self, periodMilliseconds):
        """
        SetCaretPeriod(periodMilliseconds)
        
        Get the time in milliseconds that the caret is on and off.
        """

    def GetCaretLineVisible(self):
        """
        GetCaretLineVisible() -> bool
        
        Is the background of the line containing the caret in a different
        colour?
        """

    def SetCaretLineVisible(self, show):
        """
        SetCaretLineVisible(show)
        
        Display the background of the line containing the caret in a different
        colour.
        """

    def GetCaretLineBackground(self):
        """
        GetCaretLineBackground() -> Colour
        
        Get the colour of the background of the line containing the caret.
        """

    def SetCaretLineBackground(self, back):
        """
        SetCaretLineBackground(back)
        
        Set the colour of the background of the line containing the caret.
        """

    def GetCaretForeground(self):
        """
        GetCaretForeground() -> Colour
        
        Get the foreground colour of the caret.
        """

    def SetCaretWidth(self, pixelWidth):
        """
        SetCaretWidth(pixelWidth)
        
        Set the width of the insert mode caret.
        """

    def GetCaretWidth(self):
        """
        GetCaretWidth() -> int
        
        Returns the width of the insert mode caret.
        """

    def SetHotspotActiveForeground(self, useSetting, fore):
        """
        SetHotspotActiveForeground(useSetting, fore)
        
        Set a fore colour for active hotspots.
        """

    def GetHotspotActiveForeground(self):
        """
        GetHotspotActiveForeground() -> Colour
        
        Get the fore colour for active hotspots.
        """

    def SetHotspotActiveBackground(self, useSetting, back):
        """
        SetHotspotActiveBackground(useSetting, back)
        
        Set a back colour for active hotspots.
        """

    def GetHotspotActiveBackground(self):
        """
        GetHotspotActiveBackground() -> Colour
        
        Get the back colour for active hotspots.
        """

    def SetHotspotActiveUnderline(self, underline):
        """
        SetHotspotActiveUnderline(underline)
        
        Enable / Disable underlining active hotspots.
        """

    def GetHotspotActiveUnderline(self):
        """
        GetHotspotActiveUnderline() -> bool
        
        Get whether underlining for active hotspots.
        """

    def SetHotspotSingleLine(self, singleLine):
        """
        SetHotspotSingleLine(singleLine)
        
        Limit hotspots to single line so hotspots on two lines don't merge.
        """

    def GetHotspotSingleLine(self):
        """
        GetHotspotSingleLine() -> bool
        
        Get the HotspotSingleLine property.
        """

    def GetCaretSticky(self):
        """
        GetCaretSticky() -> int
        
        Can the caret preferred x position only be changed by explicit
        movement commands?
        """

    def SetCaretSticky(self, useCaretStickyBehaviour):
        """
        SetCaretSticky(useCaretStickyBehaviour)
        
        Stop the caret preferred x position changing when the user types.
        """

    def ToggleCaretSticky(self):
        """
        ToggleCaretSticky()
        
        Switch between sticky and non-sticky: meant to be bound to a key.
        """

    def SetCaretLineBackAlpha(self, alpha):
        """
        SetCaretLineBackAlpha(alpha)
        
        Set background alpha of the caret line.
        """

    def GetCaretLineBackAlpha(self):
        """
        GetCaretLineBackAlpha() -> int
        
        Get the background alpha of the caret line.
        """

    def SetCaretStyle(self, caretStyle):
        """
        SetCaretStyle(caretStyle)
        
        Set the style of the caret to be drawn.
        """

    def GetCaretStyle(self):
        """
        GetCaretStyle() -> int
        
        Returns the current style of the caret.
        """

    def GetCaretLineVisibleAlways(self):
        """
        GetCaretLineVisibleAlways() -> bool
        
        Is the caret line always visible?
        """

    def SetCaretLineVisibleAlways(self, alwaysVisible):
        """
        SetCaretLineVisibleAlways(alwaysVisible)
        
        Sets the caret line to always visible.
        """

    def SetControlCharSymbol(self, symbol):
        """
        SetControlCharSymbol(symbol)
        
        Change the way control characters are displayed: If symbol is < 32,
        keep the drawn way, else, use the given character.
        """

    def GetControlCharSymbol(self):
        """
        GetControlCharSymbol() -> int
        
        Get the way control characters are displayed.
        """

    def SetRepresentation(self, encodedCharacter, representation):
        """
        SetRepresentation(encodedCharacter, representation)
        
        Set the way a character is drawn.
        """

    def GetRepresentation(self, encodedCharacter):
        """
        GetRepresentation(encodedCharacter) -> String
        
        Set the way a character is drawn.
        """

    def ClearRepresentation(self, encodedCharacter):
        """
        ClearRepresentation(encodedCharacter)
        
        Remove a character representation.
        """

    def SetMarginType(self, margin, marginType):
        """
        SetMarginType(margin, marginType)
        
        Set a margin to be either numeric or symbolic.
        """

    def GetMarginType(self, margin):
        """
        GetMarginType(margin) -> int
        
        Retrieve the type of a margin.
        """

    def SetMarginWidth(self, margin, pixelWidth):
        """
        SetMarginWidth(margin, pixelWidth)
        
        Set the width of a margin to a width expressed in pixels.
        """

    def GetMarginWidth(self, margin):
        """
        GetMarginWidth(margin) -> int
        
        Retrieve the width of a margin in pixels.
        """

    def SetMarginMask(self, margin, mask):
        """
        SetMarginMask(margin, mask)
        
        Set a mask that determines which markers are displayed in a margin.
        """

    def GetMarginMask(self, margin):
        """
        GetMarginMask(margin) -> int
        
        Retrieve the marker mask of a margin.
        """

    def SetMarginSensitive(self, margin, sensitive):
        """
        SetMarginSensitive(margin, sensitive)
        
        Make a margin sensitive or insensitive to mouse clicks.
        """

    def GetMarginSensitive(self, margin):
        """
        GetMarginSensitive(margin) -> bool
        
        Retrieve the mouse click sensitivity of a margin.
        """

    def SetMarginCursor(self, margin, cursor):
        """
        SetMarginCursor(margin, cursor)
        
        Set the cursor shown when the mouse is inside a margin.
        """

    def GetMarginCursor(self, margin):
        """
        GetMarginCursor(margin) -> int
        
        Retrieve the cursor shown in a margin.
        """

    def SetMarginBackground(self, margin, back):
        """
        SetMarginBackground(margin, back)
        
        Set the background colour of a margin.
        """

    def GetMarginBackground(self, margin):
        """
        GetMarginBackground(margin) -> Colour
        
        Retrieve the background colour of a margin.
        """

    def SetMarginCount(self, margins):
        """
        SetMarginCount(margins)
        
        Allocate a non-standard number of margins.
        """

    def GetMarginCount(self):
        """
        GetMarginCount() -> int
        
        How many margins are there?.
        """

    def SetMarginLeft(self, pixelWidth):
        """
        SetMarginLeft(pixelWidth)
        
        Sets the size in pixels of the left margin.
        """

    def GetMarginLeft(self):
        """
        GetMarginLeft() -> int
        
        Returns the size in pixels of the left margin.
        """

    def SetMarginRight(self, pixelWidth):
        """
        SetMarginRight(pixelWidth)
        
        Sets the size in pixels of the right margin.
        """

    def GetMarginRight(self):
        """
        GetMarginRight() -> int
        
        Returns the size in pixels of the right margin.
        """

    def SetFoldMarginColour(self, useSetting, back):
        """
        SetFoldMarginColour(useSetting, back)
        
        Set one of the colours used as a chequerboard pattern in the fold
        margin.
        """

    def SetFoldMarginHiColour(self, useSetting, fore):
        """
        SetFoldMarginHiColour(useSetting, fore)
        
        Set the other colour used as a chequerboard pattern in the fold
        margin.
        """

    def MarginSetText(self, line, text):
        """
        MarginSetText(line, text)
        
        Set the text in the text margin for a line.
        """

    def MarginGetText(self, line):
        """
        MarginGetText(line) -> String
        
        Get the text in the text margin for a line.
        """

    def MarginSetStyle(self, line, style):
        """
        MarginSetStyle(line, style)
        
        Set the style number for the text margin for a line.
        """

    def MarginGetStyle(self, line):
        """
        MarginGetStyle(line) -> int
        
        Get the style number for the text margin for a line.
        """

    def MarginSetStyles(self, line, styles):
        """
        MarginSetStyles(line, styles)
        
        Set the style in the text margin for a line.
        """

    def MarginGetStyles(self, line):
        """
        MarginGetStyles(line) -> String
        
        Get the styles in the text margin for a line.
        """

    def MarginTextClearAll(self):
        """
        MarginTextClearAll()
        
        Clear the margin text on all lines.
        """

    def MarginSetStyleOffset(self, style):
        """
        MarginSetStyleOffset(style)
        
        Get the start of the range of style numbers used for margin text.
        """

    def MarginGetStyleOffset(self):
        """
        MarginGetStyleOffset() -> int
        
        Get the start of the range of style numbers used for margin text.
        """

    def SetMarginOptions(self, marginOptions):
        """
        SetMarginOptions(marginOptions)
        
        Set the margin options.
        """

    def GetMarginOptions(self):
        """
        GetMarginOptions() -> int
        
        Get the margin options.
        """

    def AnnotationSetText(self, line, text):
        """
        AnnotationSetText(line, text)
        
        Set the annotation text for a line.
        """

    def AnnotationGetText(self, line):
        """
        AnnotationGetText(line) -> String
        
        Get the annotation text for a line.
        """

    def AnnotationSetStyle(self, line, style):
        """
        AnnotationSetStyle(line, style)
        
        Set the style number for the annotations for a line.
        """

    def AnnotationGetStyle(self, line):
        """
        AnnotationGetStyle(line) -> int
        
        Get the style number for the annotations for a line.
        """

    def AnnotationSetStyles(self, line, styles):
        """
        AnnotationSetStyles(line, styles)
        
        Set the annotation styles for a line.
        """

    def AnnotationGetStyles(self, line):
        """
        AnnotationGetStyles(line) -> String
        
        Get the annotation styles for a line.
        """

    def AnnotationGetLines(self, line):
        """
        AnnotationGetLines(line) -> int
        
        Get the number of annotation lines for a line.
        """

    def AnnotationClearAll(self):
        """
        AnnotationClearAll()
        
        Clear the annotations from all lines.
        """

    def AnnotationSetVisible(self, visible):
        """
        AnnotationSetVisible(visible)
        
        Set the visibility for the annotations for a view.
        """

    def AnnotationGetVisible(self):
        """
        AnnotationGetVisible() -> int
        
        Get the visibility for the annotations for a view.
        """

    def AnnotationSetStyleOffset(self, style):
        """
        AnnotationSetStyleOffset(style)
        
        Get the start of the range of style numbers used for annotations.
        """

    def AnnotationGetStyleOffset(self):
        """
        AnnotationGetStyleOffset() -> int
        
        Get the start of the range of style numbers used for annotations.
        """

    def GetBufferedDraw(self):
        """
        GetBufferedDraw() -> bool
        
        Is drawing done first into a buffer or direct to the screen?
        """

    def SetBufferedDraw(self, buffered):
        """
        SetBufferedDraw(buffered)
        
        If drawing is buffered then each line of text is drawn into a bitmap
        buffer before drawing it to the screen to avoid flicker.
        """

    def SetCodePage(self, codePage):
        """
        SetCodePage(codePage)
        
        Set the code page used to interpret the bytes of the document as
        characters.
        """

    def GetIMEInteraction(self):
        """
        GetIMEInteraction() -> int
        
        Is the IME displayed in a window or inline?
        """

    def SetIMEInteraction(self, imeInteraction):
        """
        SetIMEInteraction(imeInteraction)
        
        Choose to display the the IME in a winow or inline.
        """

    def GetCodePage(self):
        """
        GetCodePage() -> int
        
        Get the code page used to interpret the bytes of the document as
        characters.
        """

    def SetLayoutCache(self, cacheMode):
        """
        SetLayoutCache(cacheMode)
        
        Sets the degree of caching of layout information.
        """

    def GetTwoPhaseDraw(self):
        """
        GetTwoPhaseDraw() -> bool
        
        Is drawing done in two phases with backgrounds drawn before
        foregrounds?
        """

    def SetTwoPhaseDraw(self, twoPhase):
        """
        SetTwoPhaseDraw(twoPhase)
        
        In twoPhaseDraw mode, drawing is performed in two phases, first the
        background and then the foreground.
        """

    def GetPhasesDraw(self):
        """
        GetPhasesDraw() -> int
        
        How many phases is drawing done in?
        """

    def SetPhasesDraw(self, phases):
        """
        SetPhasesDraw(phases)
        
        In one phase draw, text is drawn in a series of rectangular blocks
        with no overlap.
        """

    def SetFontQuality(self, fontQuality):
        """
        SetFontQuality(fontQuality)
        
        Choose the quality level for text.
        """

    def GetFontQuality(self):
        """
        GetFontQuality() -> int
        
        Retrieve the quality level for text.
        """

    def SetSTCFocus(self, focus):
        """
        SetSTCFocus(focus)
        
        Change internal focus flag.
        """

    def GetSTCFocus(self):
        """
        GetSTCFocus() -> bool
        
        Get internal focus flag.
        """

    def SetTechnology(self, technology):
        """
        SetTechnology(technology)
        
        Set the technology used.
        """

    def GetTechnology(self):
        """
        GetTechnology() -> int
        
        Get the tech.
        """

    def BraceHighlight(self, posA, posB):
        """
        BraceHighlight(posA, posB)
        
        Highlight the characters at two positions.
        """

    def BraceHighlightIndicator(self, useSetting, indicator):
        """
        BraceHighlightIndicator(useSetting, indicator)
        
        Use specified indicator to highlight matching braces instead of
        changing their style.
        """

    def BraceBadLight(self, pos):
        """
        BraceBadLight(pos)
        
        Highlight the character at a position indicating there is no matching
        brace.
        """

    def BraceBadLightIndicator(self, useSetting, indicator):
        """
        BraceBadLightIndicator(useSetting, indicator)
        
        Use specified indicator to highlight non matching brace instead of
        changing its style.
        """

    def BraceMatch(self, pos, maxReStyle=0):
        """
        BraceMatch(pos, maxReStyle=0) -> int
        
        Find the position of a matching brace or wxSTC_INVALID_POSITION if no
        match.
        """

    def SetTabWidth(self, tabWidth):
        """
        SetTabWidth(tabWidth)
        
        Change the visible size of a tab to be a multiple of the width of a
        space character.
        """

    def GetTabWidth(self):
        """
        GetTabWidth() -> int
        
        Retrieve the visible size of a tab.
        """

    def ClearTabStops(self, line):
        """
        ClearTabStops(line)
        
        Clear explicit tabstops on a line.
        """

    def AddTabStop(self, line, x):
        """
        AddTabStop(line, x)
        
        Add an explicit tab stop for a line.
        """

    def GetNextTabStop(self, line, x):
        """
        GetNextTabStop(line, x) -> int
        
        Find the next explicit tab stop position on a line after a position.
        """

    def SetIndent(self, indentSize):
        """
        SetIndent(indentSize)
        
        Set the number of spaces used for one level of indentation.
        """

    def GetIndent(self):
        """
        GetIndent() -> int
        
        Retrieve indentation size.
        """

    def SetUseTabs(self, useTabs):
        """
        SetUseTabs(useTabs)
        
        Indentation will only use space characters if useTabs is false,
        otherwise it will use a combination of tabs and spaces.
        """

    def GetUseTabs(self):
        """
        GetUseTabs() -> bool
        
        Retrieve whether tabs will be used in indentation.
        """

    def SetLineIndentation(self, line, indentation):
        """
        SetLineIndentation(line, indentation)
        
        Change the indentation of a line to a number of columns.
        """

    def GetLineIndentation(self, line):
        """
        GetLineIndentation(line) -> int
        
        Retrieve the number of columns that a line is indented.
        """

    def GetLineIndentPosition(self, line):
        """
        GetLineIndentPosition(line) -> int
        
        Retrieve the position before the first non indentation character on a
        line.
        """

    def SetIndentationGuides(self, indentView):
        """
        SetIndentationGuides(indentView)
        
        Show or hide indentation guides.
        """

    def GetIndentationGuides(self):
        """
        GetIndentationGuides() -> int
        
        Are the indentation guides visible?
        """

    def SetHighlightGuide(self, column):
        """
        SetHighlightGuide(column)
        
        Set the highlighted indentation guide column.
        """

    def GetHighlightGuide(self):
        """
        GetHighlightGuide() -> int
        
        Get the highlighted indentation guide column.
        """

    def SetTabIndents(self, tabIndents):
        """
        SetTabIndents(tabIndents)
        
        Sets whether a tab pressed when caret is within indentation indents.
        """

    def GetTabIndents(self):
        """
        GetTabIndents() -> bool
        
        Does a tab pressed when caret is within indentation indent?
        """

    def SetBackSpaceUnIndents(self, bsUnIndents):
        """
        SetBackSpaceUnIndents(bsUnIndents)
        
        Sets whether a backspace pressed when caret is within indentation
        unindents.
        """

    def GetBackSpaceUnIndents(self):
        """
        GetBackSpaceUnIndents() -> bool
        
        Does a backspace pressed when caret is within indentation unindent?
        """

    def MarkerLineFromHandle(self, markerHandle):
        """
        MarkerLineFromHandle(markerHandle) -> int
        
        Retrieve the line number at which a particular marker is located.
        """

    def MarkerDeleteHandle(self, markerHandle):
        """
        MarkerDeleteHandle(markerHandle)
        
        Delete a marker.
        """

    def MarkerDefine(self, markerNumber, markerSymbol, foreground=NullColour, background=NullColour):
        """
        MarkerDefine(markerNumber, markerSymbol, foreground=NullColour, background=NullColour)
        
        Set the symbol used for a particular marker number, and optionally the
        fore and background colours.
        """

    def MarkerSetForeground(self, markerNumber, fore):
        """
        MarkerSetForeground(markerNumber, fore)
        
        Set the foreground colour used for a particular marker number.
        """

    def MarkerSetBackground(self, markerNumber, back):
        """
        MarkerSetBackground(markerNumber, back)
        
        Set the background colour used for a particular marker number.
        """

    def MarkerSetBackgroundSelected(self, markerNumber, back):
        """
        MarkerSetBackgroundSelected(markerNumber, back)
        
        Set the background colour used for a particular marker number when its
        folding block is selected.
        """

    def MarkerEnableHighlight(self, enabled):
        """
        MarkerEnableHighlight(enabled)
        
        Enable/disable highlight for current folding block (smallest one that
        contains the caret)
        """

    def MarkerAdd(self, line, markerNumber):
        """
        MarkerAdd(line, markerNumber) -> int
        
        Add a marker to a line, returning an ID which can be used to find or
        delete the marker.
        """

    def MarkerDelete(self, line, markerNumber):
        """
        MarkerDelete(line, markerNumber)
        
        Delete a marker from a line.
        """

    def MarkerDeleteAll(self, markerNumber):
        """
        MarkerDeleteAll(markerNumber)
        
        Delete all markers with a particular number from all lines.
        """

    def MarkerGet(self, line):
        """
        MarkerGet(line) -> int
        
        Get a bit mask of all the markers set on a line.
        """

    def MarkerNext(self, lineStart, markerMask):
        """
        MarkerNext(lineStart, markerMask) -> int
        
        Find the next line at or after lineStart that includes a marker in
        mask.
        """

    def MarkerPrevious(self, lineStart, markerMask):
        """
        MarkerPrevious(lineStart, markerMask) -> int
        
        Find the previous line before lineStart that includes a marker in
        mask.
        """

    def MarkerAddSet(self, line, markerSet):
        """
        MarkerAddSet(line, markerSet)
        
        Add a set of markers to a line.
        """

    def MarkerSetAlpha(self, markerNumber, alpha):
        """
        MarkerSetAlpha(markerNumber, alpha)
        
        Set the alpha used for a marker that is drawn in the text area, not
        the margin.
        """

    def GetMarkerSymbolDefined(self, markerNumber):
        """
        GetMarkerSymbolDefined(markerNumber) -> int
        
        Which symbol was defined for markerNumber with MarkerDefine.
        """

    def RGBAImageSetWidth(self, width):
        """
        RGBAImageSetWidth(width)
        
        Set the width for future RGBA image data.
        """

    def RGBAImageSetHeight(self, height):
        """
        RGBAImageSetHeight(height)
        
        Set the height for future RGBA image data.
        """

    def RGBAImageSetScale(self, scalePercent):
        """
        RGBAImageSetScale(scalePercent)
        
        Set the scale factor in percent for future RGBA image data.
        """

    def MarkerDefineRGBAImage(self, markerNumber, pixels):
        """
        MarkerDefineRGBAImage(markerNumber, pixels)
        
        Define a marker from RGBA data.
        
        It has the width and height from RGBAImageSetWidth/Height. You must
        ensure that the buffer is at least width*height*4 bytes long.
        """

    def IndicatorSetStyle(self, indicator, indicatorStyle):
        """
        IndicatorSetStyle(indicator, indicatorStyle)
        
        Set an indicator to plain, squiggle or TT.
        """

    def IndicatorGetStyle(self, indicator):
        """
        IndicatorGetStyle(indicator) -> int
        
        Retrieve the style of an indicator.
        """

    def IndicatorSetForeground(self, indicator, fore):
        """
        IndicatorSetForeground(indicator, fore)
        
        Set the foreground colour of an indicator.
        """

    def IndicatorGetForeground(self, indicator):
        """
        IndicatorGetForeground(indicator) -> Colour
        
        Retrieve the foreground colour of an indicator.
        """

    def IndicatorSetUnder(self, indicator, under):
        """
        IndicatorSetUnder(indicator, under)
        
        Set an indicator to draw under text or over(default).
        """

    def IndicatorGetUnder(self, indicator):
        """
        IndicatorGetUnder(indicator) -> bool
        
        Retrieve whether indicator drawn under or over text.
        """

    def IndicatorSetHoverStyle(self, indicator, indicatorStyle):
        """
        IndicatorSetHoverStyle(indicator, indicatorStyle)
        
        Set a hover indicator to plain, squiggle or TT.
        """

    def IndicatorGetHoverStyle(self, indicator):
        """
        IndicatorGetHoverStyle(indicator) -> int
        
        Retrieve the hover style of an indicator.
        """

    def IndicatorSetHoverForeground(self, indicator, fore):
        """
        IndicatorSetHoverForeground(indicator, fore)
        
        Set the foreground hover colour of an indicator.
        """

    def IndicatorGetHoverForeground(self, indicator):
        """
        IndicatorGetHoverForeground(indicator) -> Colour
        
        Retrieve the foreground hover colour of an indicator.
        """

    def IndicatorSetFlags(self, indicator, flags):
        """
        IndicatorSetFlags(indicator, flags)
        
        Set the attributes of an indicator.
        """

    def IndicatorGetFlags(self, indicator):
        """
        IndicatorGetFlags(indicator) -> int
        
        Retrieve the attributes of an indicator.
        """

    def SetIndicatorCurrent(self, indicator):
        """
        SetIndicatorCurrent(indicator)
        
        Set the indicator used for IndicatorFillRange and IndicatorClearRange.
        """

    def GetIndicatorCurrent(self):
        """
        GetIndicatorCurrent() -> int
        
        Get the current indicator.
        """

    def SetIndicatorValue(self, value):
        """
        SetIndicatorValue(value)
        
        Set the value used for IndicatorFillRange.
        """

    def GetIndicatorValue(self):
        """
        GetIndicatorValue() -> int
        
        Get the current indicator value.
        """

    def IndicatorFillRange(self, start, lengthFill):
        """
        IndicatorFillRange(start, lengthFill)
        
        Turn a indicator on over a range.
        """

    def IndicatorClearRange(self, start, lengthClear):
        """
        IndicatorClearRange(start, lengthClear)
        
        Turn a indicator off over a range.
        """

    def IndicatorAllOnFor(self, pos):
        """
        IndicatorAllOnFor(pos) -> int
        
        Are any indicators present at pos?
        """

    def IndicatorValueAt(self, indicator, pos):
        """
        IndicatorValueAt(indicator, pos) -> int
        
        What value does a particular indicator have at a position?
        """

    def IndicatorStart(self, indicator, pos):
        """
        IndicatorStart(indicator, pos) -> int
        
        Where does a particular indicator start?
        """

    def IndicatorEnd(self, indicator, pos):
        """
        IndicatorEnd(indicator, pos) -> int
        
        Where does a particular indicator end?
        """

    def IndicatorSetAlpha(self, indicator, alpha):
        """
        IndicatorSetAlpha(indicator, alpha)
        
        Set the alpha fill colour of the given indicator.
        """

    def IndicatorGetAlpha(self, indicator):
        """
        IndicatorGetAlpha(indicator) -> int
        
        Get the alpha fill colour of the given indicator.
        """

    def IndicatorSetOutlineAlpha(self, indicator, alpha):
        """
        IndicatorSetOutlineAlpha(indicator, alpha)
        
        Set the alpha outline colour of the given indicator.
        """

    def IndicatorGetOutlineAlpha(self, indicator):
        """
        IndicatorGetOutlineAlpha(indicator) -> int
        
        Get the alpha outline colour of the given indicator.
        """

    def AutoCompShow(self, lengthEntered, itemList):
        """
        AutoCompShow(lengthEntered, itemList)
        
        Display a auto-completion list.
        """

    def AutoCompCancel(self):
        """
        AutoCompCancel()
        
        Remove the auto-completion list from the screen.
        """

    def AutoCompActive(self):
        """
        AutoCompActive() -> bool
        
        Is there an auto-completion list visible?
        """

    def AutoCompPosStart(self):
        """
        AutoCompPosStart() -> int
        
        Retrieve the position of the caret when the auto-completion list was
        displayed.
        """

    def AutoCompComplete(self):
        """
        AutoCompComplete()
        
        User has selected an item so remove the list and insert the selection.
        """

    def AutoCompStops(self, characterSet):
        """
        AutoCompStops(characterSet)
        
        Define a set of character that when typed cancel the auto-completion
        list.
        """

    def AutoCompSetSeparator(self, separatorCharacter):
        """
        AutoCompSetSeparator(separatorCharacter)
        
        Change the separator character in the string setting up an auto-
        completion list.
        """

    def AutoCompGetSeparator(self):
        """
        AutoCompGetSeparator() -> int
        
        Retrieve the auto-completion list separator character.
        """

    def AutoCompSelect(self, select):
        """
        AutoCompSelect(select)
        
        Select the item in the auto-completion list that starts with a string.
        """

    def AutoCompSetCancelAtStart(self, cancel):
        """
        AutoCompSetCancelAtStart(cancel)
        
        Should the auto-completion list be cancelled if the user backspaces to
        a position before where the box was created.
        """

    def AutoCompGetCancelAtStart(self):
        """
        AutoCompGetCancelAtStart() -> bool
        
        Retrieve whether auto-completion cancelled by backspacing before
        start.
        """

    def AutoCompSetFillUps(self, characterSet):
        """
        AutoCompSetFillUps(characterSet)
        
        Define a set of characters that when typed will cause the
        autocompletion to choose the selected item.
        """

    def AutoCompSetChooseSingle(self, chooseSingle):
        """
        AutoCompSetChooseSingle(chooseSingle)
        
        Should a single item auto-completion list automatically choose the
        item.
        """

    def AutoCompGetChooseSingle(self):
        """
        AutoCompGetChooseSingle() -> bool
        
        Retrieve whether a single item auto-completion list automatically
        choose the item.
        """

    def AutoCompSetIgnoreCase(self, ignoreCase):
        """
        AutoCompSetIgnoreCase(ignoreCase)
        
        Set whether case is significant when performing auto-completion
        searches.
        """

    def AutoCompGetIgnoreCase(self):
        """
        AutoCompGetIgnoreCase() -> bool
        
        Retrieve state of ignore case flag.
        """

    def AutoCompSetAutoHide(self, autoHide):
        """
        AutoCompSetAutoHide(autoHide)
        
        Set whether or not autocompletion is hidden automatically when nothing
        matches.
        """

    def AutoCompGetAutoHide(self):
        """
        AutoCompGetAutoHide() -> bool
        
        Retrieve whether or not autocompletion is hidden automatically when
        nothing matches.
        """

    def AutoCompSetDropRestOfWord(self, dropRestOfWord):
        """
        AutoCompSetDropRestOfWord(dropRestOfWord)
        
        Set whether or not autocompletion deletes any word characters after
        the inserted text upon completion.
        """

    def AutoCompGetDropRestOfWord(self):
        """
        AutoCompGetDropRestOfWord() -> bool
        
        Retrieve whether or not autocompletion deletes any word characters
        after the inserted text upon completion.
        """

    def RegisterImage(self, type, bmp):
        """
        RegisterImage(type, bmp)
        
        Register an image for use in autocompletion lists.
        """

    def ClearRegisteredImages(self):
        """
        ClearRegisteredImages()
        
        Clear all the registered images.
        """

    def AutoCompGetTypeSeparator(self):
        """
        AutoCompGetTypeSeparator() -> int
        
        Retrieve the auto-completion list type-separator character.
        """

    def AutoCompSetTypeSeparator(self, separatorCharacter):
        """
        AutoCompSetTypeSeparator(separatorCharacter)
        
        Change the type-separator character in the string setting up an auto-
        completion list.
        """

    def AutoCompSetMaxWidth(self, characterCount):
        """
        AutoCompSetMaxWidth(characterCount)
        
        Set the maximum width, in characters, of auto-completion and user
        lists.
        """

    def AutoCompGetMaxWidth(self):
        """
        AutoCompGetMaxWidth() -> int
        
        Get the maximum width, in characters, of auto-completion and user
        lists.
        """

    def AutoCompSetMaxHeight(self, rowCount):
        """
        AutoCompSetMaxHeight(rowCount)
        
        Set the maximum height, in rows, of auto-completion and user lists.
        """

    def AutoCompGetMaxHeight(self):
        """
        AutoCompGetMaxHeight() -> int
        
        Set the maximum height, in rows, of auto-completion and user lists.
        """

    def AutoCompGetCurrent(self):
        """
        AutoCompGetCurrent() -> int
        
        Get currently selected item position in the auto-completion list.
        """

    def AutoCompGetCurrentText(self):
        """
        AutoCompGetCurrentText() -> String
        
        Get currently selected item text in the auto-completion list.
        """

    def AutoCompSetCaseInsensitiveBehaviour(self, behaviour):
        """
        AutoCompSetCaseInsensitiveBehaviour(behaviour)
        
        Set auto-completion case insensitive behaviour to either prefer case-
        sensitive matches or have no preference.
        """

    def AutoCompGetCaseInsensitiveBehaviour(self):
        """
        AutoCompGetCaseInsensitiveBehaviour() -> int
        
        Get auto-completion case insensitive behaviour.
        """

    def AutoCompSetMulti(self, multi):
        """
        AutoCompSetMulti(multi)
        
        Change the effect of autocompleting when there are multiple
        selections.
        """

    def AutoCompGetMulti(self):
        """
        AutoCompGetMulti() -> int
        
        Retrieve the effect of autocompleting when there are multiple
        selections.
        """

    def AutoCompSetOrder(self, order):
        """
        AutoCompSetOrder(order)
        
        Set the way autocompletion lists are ordered.
        """

    def AutoCompGetOrder(self):
        """
        AutoCompGetOrder() -> int
        
        Get the way autocompletion lists are ordered.
        """

    def RegisterRGBAImage(self, type, pixels):
        """
        RegisterRGBAImage(type, pixels)
        
        Register an RGBA image for use in autocompletion lists.
        
        It has the width and height from RGBAImageSetWidth/Height. You must
        ensure that the buffer is at least width*height*4 bytes long.
        """

    def UserListShow(self, listType, itemList):
        """
        UserListShow(listType, itemList)
        
        Display a list of strings and send notification when user chooses one.
        """

    def CallTipShow(self, pos, definition):
        """
        CallTipShow(pos, definition)
        
        Show a call tip containing a definition near position pos.
        """

    def CallTipCancel(self):
        """
        CallTipCancel()
        
        Remove the call tip from the screen.
        """

    def CallTipActive(self):
        """
        CallTipActive() -> bool
        
        Is there an active call tip?
        """

    def CallTipPosAtStart(self):
        """
        CallTipPosAtStart() -> int
        
        Retrieve the position where the caret was before displaying the call
        tip.
        """

    def CallTipSetPosAtStart(self, posStart):
        """
        CallTipSetPosAtStart(posStart)
        
        Set the start position in order to change when backspacing removes the
        calltip.
        """

    def CallTipSetHighlight(self, highlightStart, highlightEnd):
        """
        CallTipSetHighlight(highlightStart, highlightEnd)
        
        Highlight a segment of the definition.
        """

    def CallTipSetBackground(self, back):
        """
        CallTipSetBackground(back)
        
        Set the background colour for the call tip.
        """

    def CallTipSetForeground(self, fore):
        """
        CallTipSetForeground(fore)
        
        Set the foreground colour for the call tip.
        """

    def CallTipSetForegroundHighlight(self, fore):
        """
        CallTipSetForegroundHighlight(fore)
        
        Set the foreground colour for the highlighted part of the call tip.
        """

    def CallTipUseStyle(self, tabSize):
        """
        CallTipUseStyle(tabSize)
        
        Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels.
        """

    def CallTipSetPosition(self, above):
        """
        CallTipSetPosition(above)
        
        Set position of calltip, above or below text.
        """

    def LineDown(self):
        """
        LineDown()
        
        Move caret down one line.
        """

    def LineDownExtend(self):
        """
        LineDownExtend()
        
        Move caret down one line extending selection to new caret position.
        """

    def LineUp(self):
        """
        LineUp()
        
        Move caret up one line.
        """

    def LineUpExtend(self):
        """
        LineUpExtend()
        
        Move caret up one line extending selection to new caret position.
        """

    def CharLeft(self):
        """
        CharLeft()
        
        Move caret left one character.
        """

    def CharLeftExtend(self):
        """
        CharLeftExtend()
        
        Move caret left one character extending selection to new caret
        position.
        """

    def CharRight(self):
        """
        CharRight()
        
        Move caret right one character.
        """

    def CharRightExtend(self):
        """
        CharRightExtend()
        
        Move caret right one character extending selection to new caret
        position.
        """

    def WordLeft(self):
        """
        WordLeft()
        
        Move caret left one word.
        """

    def WordLeftExtend(self):
        """
        WordLeftExtend()
        
        Move caret left one word extending selection to new caret position.
        """

    def WordRight(self):
        """
        WordRight()
        
        Move caret right one word.
        """

    def WordRightExtend(self):
        """
        WordRightExtend()
        
        Move caret right one word extending selection to new caret position.
        """

    def Home(self):
        """
        Home()
        
        Move caret to first position on line.
        """

    def HomeExtend(self):
        """
        HomeExtend()
        
        Move caret to first position on line extending selection to new caret
        position.
        """

    def LineEnd(self):
        """
        LineEnd()
        
        Move caret to last position on line.
        """

    def LineEndExtend(self):
        """
        LineEndExtend()
        
        Move caret to last position on line extending selection to new caret
        position.
        """

    def DocumentStart(self):
        """
        DocumentStart()
        
        Move caret to first position in document.
        """

    def DocumentStartExtend(self):
        """
        DocumentStartExtend()
        
        Move caret to first position in document extending selection to new
        caret position.
        """

    def DocumentEnd(self):
        """
        DocumentEnd()
        
        Move caret to last position in document.
        """

    def DocumentEndExtend(self):
        """
        DocumentEndExtend()
        
        Move caret to last position in document extending selection to new
        caret position.
        """

    def PageUp(self):
        """
        PageUp()
        
        Move caret one page up.
        """

    def PageUpExtend(self):
        """
        PageUpExtend()
        
        Move caret one page up extending selection to new caret position.
        """

    def PageDown(self):
        """
        PageDown()
        
        Move caret one page down.
        """

    def PageDownExtend(self):
        """
        PageDownExtend()
        
        Move caret one page down extending selection to new caret position.
        """

    def EditToggleOvertype(self):
        """
        EditToggleOvertype()
        
        Switch from insert to overtype mode or the reverse.
        """

    def Cancel(self):
        """
        Cancel()
        
        Cancel any modes such as call tip or auto-completion list display.
        """

    def DeleteBack(self):
        """
        DeleteBack()
        
        Delete the selection or if no selection, the character before the
        caret.
        """

    def Tab(self):
        """
        Tab()
        
        If selection is empty or all on one line replace the selection with a
        tab character.
        """

    def BackTab(self):
        """
        BackTab()
        
        Dedent the selected lines.
        """

    def NewLine(self):
        """
        NewLine()
        
        Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
        """

    def FormFeed(self):
        """
        FormFeed()
        
        Insert a Form Feed character.
        """

    def VCHome(self):
        """
        VCHome()
        
        Move caret to before first visible character on line.
        """

    def VCHomeExtend(self):
        """
        VCHomeExtend()
        
        Like VCHome but extending selection to new caret position.
        """

    def DelWordLeft(self):
        """
        DelWordLeft()
        
        Delete the word to the left of the caret.
        """

    def DelWordRight(self):
        """
        DelWordRight()
        
        Delete the word to the right of the caret.
        """

    def DelWordRightEnd(self):
        """
        DelWordRightEnd()
        
        Delete the word to the right of the caret, but not the trailing non-
        word characters.
        """

    def LineCut(self):
        """
        LineCut()
        
        Cut the line containing the caret.
        """

    def LineDelete(self):
        """
        LineDelete()
        
        Delete the line containing the caret.
        """

    def LineTranspose(self):
        """
        LineTranspose()
        
        Switch the current line with the previous.
        """

    def LineDuplicate(self):
        """
        LineDuplicate()
        
        Duplicate the current line.
        """

    def LowerCase(self):
        """
        LowerCase()
        
        Transform the selection to lower case.
        """

    def UpperCase(self):
        """
        UpperCase()
        
        Transform the selection to upper case.
        """

    def LineScrollDown(self):
        """
        LineScrollDown()
        
        Scroll the document down, keeping the caret visible.
        """

    def LineScrollUp(self):
        """
        LineScrollUp()
        
        Scroll the document up, keeping the caret visible.
        """

    def DeleteBackNotLine(self):
        """
        DeleteBackNotLine()
        
        Delete the selection or if no selection, the character before the
        caret.
        """

    def HomeDisplay(self):
        """
        HomeDisplay()
        
        Move caret to first position on display line.
        """

    def HomeDisplayExtend(self):
        """
        HomeDisplayExtend()
        
        Move caret to first position on display line extending selection to
        new caret position.
        """

    def LineEndDisplay(self):
        """
        LineEndDisplay()
        
        Move caret to last position on display line.
        """

    def LineEndDisplayExtend(self):
        """
        LineEndDisplayExtend()
        
        Move caret to last position on display line extending selection to new
        caret position.
        """

    def HomeWrap(self):
        """
        HomeWrap()
        
        Like Home but when word-wrap is enabled goes first to start of display
        line HomeDisplay, then to start of document line Home.
        """

    def HomeWrapExtend(self):
        """
        HomeWrapExtend()
        
        Like HomeExtend but when word-wrap is enabled extends first to start
        of display line HomeDisplayExtend, then to start of document line
        HomeExtend.
        """

    def LineEndWrap(self):
        """
        LineEndWrap()
        
        Like LineEnd but when word-wrap is enabled goes first to end of
        display line LineEndDisplay, then to start of document line LineEnd.
        """

    def LineEndWrapExtend(self):
        """
        LineEndWrapExtend()
        
        Like LineEndExtend but when word-wrap is enabled extends first to end
        of display line LineEndDisplayExtend, then to start of document line
        LineEndExtend.
        """

    def VCHomeWrap(self):
        """
        VCHomeWrap()
        
        Like VCHome but when word-wrap is enabled goes first to start of
        display line VCHomeDisplay, then behaves like VCHome.
        """

    def VCHomeWrapExtend(self):
        """
        VCHomeWrapExtend()
        
        Like VCHomeExtend but when word-wrap is enabled extends first to start
        of display line VCHomeDisplayExtend, then behaves like VCHomeExtend.
        """

    def LineCopy(self):
        """
        LineCopy()
        
        Copy the line containing the caret.
        """

    def WordPartLeft(self):
        """
        WordPartLeft()
        
        Move to the previous change in capitalisation.
        """

    def WordPartLeftExtend(self):
        """
        WordPartLeftExtend()
        
        Move to the previous change in capitalisation extending selection to
        new caret position.
        """

    def WordPartRight(self):
        """
        WordPartRight()
        
        Move to the change next in capitalisation.
        """

    def WordPartRightExtend(self):
        """
        WordPartRightExtend()
        
        Move to the next change in capitalisation extending selection to new
        caret position.
        """

    def DelLineLeft(self):
        """
        DelLineLeft()
        
        Delete back from the current position to the start of the line.
        """

    def DelLineRight(self):
        """
        DelLineRight()
        
        Delete forwards from the current position to the end of the line.
        """

    def ParaDown(self):
        """
        ParaDown()
        
        Move caret down one paragraph (delimited by empty lines).
        """

    def ParaDownExtend(self):
        """
        ParaDownExtend()
        
        Extend selection down one paragraph (delimited by empty lines).
        """

    def ParaUp(self):
        """
        ParaUp()
        
        Move caret up one paragraph (delimited by empty lines).
        """

    def ParaUpExtend(self):
        """
        ParaUpExtend()
        
        Extend selection up one paragraph (delimited by empty lines).
        """

    def LineDownRectExtend(self):
        """
        LineDownRectExtend()
        
        Move caret down one line, extending rectangular selection to new caret
        position.
        """

    def LineUpRectExtend(self):
        """
        LineUpRectExtend()
        
        Move caret up one line, extending rectangular selection to new caret
        position.
        """

    def CharLeftRectExtend(self):
        """
        CharLeftRectExtend()
        
        Move caret left one character, extending rectangular selection to new
        caret position.
        """

    def CharRightRectExtend(self):
        """
        CharRightRectExtend()
        
        Move caret right one character, extending rectangular selection to new
        caret position.
        """

    def HomeRectExtend(self):
        """
        HomeRectExtend()
        
        Move caret to first position on line, extending rectangular selection
        to new caret position.
        """

    def VCHomeRectExtend(self):
        """
        VCHomeRectExtend()
        
        Move caret to before first visible character on line.
        """

    def LineEndRectExtend(self):
        """
        LineEndRectExtend()
        
        Move caret to last position on line, extending rectangular selection
        to new caret position.
        """

    def PageUpRectExtend(self):
        """
        PageUpRectExtend()
        
        Move caret one page up, extending rectangular selection to new caret
        position.
        """

    def PageDownRectExtend(self):
        """
        PageDownRectExtend()
        
        Move caret one page down, extending rectangular selection to new caret
        position.
        """

    def StutteredPageUp(self):
        """
        StutteredPageUp()
        
        Move caret to top of page, or one page up if already at top of page.
        """

    def StutteredPageUpExtend(self):
        """
        StutteredPageUpExtend()
        
        Move caret to top of page, or one page up if already at top of page,
        extending selection to new caret position.
        """

    def StutteredPageDown(self):
        """
        StutteredPageDown()
        
        Move caret to bottom of page, or one page down if already at bottom of
        page.
        """

    def StutteredPageDownExtend(self):
        """
        StutteredPageDownExtend()
        
        Move caret to bottom of page, or one page down if already at bottom of
        page, extending selection to new caret position.
        """

    def WordLeftEnd(self):
        """
        WordLeftEnd()
        
        Move caret left one word, position cursor at end of word.
        """

    def WordLeftEndExtend(self):
        """
        WordLeftEndExtend()
        
        Move caret left one word, position cursor at end of word, extending
        selection to new caret position.
        """

    def WordRightEnd(self):
        """
        WordRightEnd()
        
        Move caret right one word, position cursor at end of word.
        """

    def WordRightEndExtend(self):
        """
        WordRightEndExtend()
        
        Move caret right one word, position cursor at end of word, extending
        selection to new caret position.
        """

    def SelectionDuplicate(self):
        """
        SelectionDuplicate()
        
        Duplicate the selection.
        """

    def VerticalCentreCaret(self):
        """
        VerticalCentreCaret()
        
        Centre current line in window.
        """

    def ScrollToStart(self):
        """
        ScrollToStart()
        
        Scroll to start of document.
        """

    def ScrollToEnd(self):
        """
        ScrollToEnd()
        
        Scroll to end of document.
        """

    def VCHomeDisplay(self):
        """
        VCHomeDisplay()
        
        Move caret to before first visible character on display line.
        """

    def VCHomeDisplayExtend(self):
        """
        VCHomeDisplayExtend()
        
        Like VCHomeDisplay but extending selection to new caret position.
        """

    def CmdKeyAssign(self, key, modifiers, cmd):
        """
        CmdKeyAssign(key, modifiers, cmd)
        
        When key+modifier combination keyDefinition is pressed perform
        sciCommand.
        """

    def CmdKeyClear(self, key, modifiers):
        """
        CmdKeyClear(key, modifiers)
        
        When key+modifier combination keyDefinition is pressed do nothing.
        """

    def CmdKeyClearAll(self):
        """
        CmdKeyClearAll()
        
        Drop all key mappings.
        """

    def UsePopUp(self, popUpMode):
        """
        UsePopUp(popUpMode)
        
        Set whether a pop up menu is displayed automatically when the user
        presses the wrong mouse button on certain areas.
        """

    def StartRecord(self):
        """
        StartRecord()
        
        Start notifying the container of all key presses and commands.
        """

    def StopRecord(self):
        """
        StopRecord()
        
        Stop notifying the container of all key presses and commands.
        """

    def SetPrintMagnification(self, magnification):
        """
        SetPrintMagnification(magnification)
        
        Sets the print magnification added to the point size of each style for
        printing.
        """

    def GetPrintMagnification(self):
        """
        GetPrintMagnification() -> int
        
        Returns the print magnification.
        """

    def SetPrintColourMode(self, mode):
        """
        SetPrintColourMode(mode)
        
        Modify colours when printing for clearer printed text.
        """

    def GetPrintColourMode(self):
        """
        GetPrintColourMode() -> int
        
        Returns the print colour mode.
        """

    def FormatRange(self, doDraw, startPos, endPos, draw, target, renderRect, pageRect):
        """
        FormatRange(doDraw, startPos, endPos, draw, target, renderRect, pageRect) -> int
        
        On Windows, will draw the document into a display context such as a
        printer.
        """

    def SetPrintWrapMode(self, wrapMode):
        """
        SetPrintWrapMode(wrapMode)
        
        Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped
        (wxSTC_WRAP_NONE).
        """

    def GetPrintWrapMode(self):
        """
        GetPrintWrapMode() -> int
        
        Is printing line wrapped?
        """

    def GetDirectFunction(self):
        """
        GetDirectFunction() -> void
        
        Retrieve a pointer to a function that processes messages for this
        Scintilla.
        """

    def GetDirectPointer(self):
        """
        GetDirectPointer() -> void
        
        Retrieve a pointer value to use as the first argument when calling the
        function returned by GetDirectFunction.
        """

    def GetCharacterPointer(self):
        """
        GetCharacterPointer() -> PyObject
        
        Compact the document buffer and return a read-only memoryview
        object of the characters in the document.
        """

    def GetRangePointer(self, position, rangeLength):
        """
        GetRangePointer(position, rangeLength) -> PyObject
        
        Return a read-only pointer to a range of characters in the
        document. May move the gap so that the range is contiguous,
        but will only move up to rangeLength bytes.
        """

    def GetGapPosition(self):
        """
        GetGapPosition() -> int
        
        Return a position which, to avoid performance costs, should not be
        within the range of a call to GetRangePointer.
        """

    def GetDocPointer(self):
        """
        GetDocPointer() -> void
        
        Retrieve a pointer to the document object.
        """

    def SetDocPointer(self, docPointer):
        """
        SetDocPointer(docPointer)
        
        Change the document object used.
        """

    def CreateDocument(self):
        """
        CreateDocument() -> void
        
        Create a new document object.
        """

    def AddRefDocument(self, docPointer):
        """
        AddRefDocument(docPointer)
        
        Extend life of document.
        """

    def ReleaseDocument(self, docPointer):
        """
        ReleaseDocument(docPointer)
        
        Release a reference to the document, deleting document if it fades to
        black.
        """

    def CreateLoader(self, bytes):
        """
        CreateLoader(bytes) -> void
        
        Create an ILoader*.
        """

    def VisibleFromDocLine(self, docLine):
        """
        VisibleFromDocLine(docLine) -> int
        
        Find the display line of a document line taking hidden lines into
        account.
        """

    def DocLineFromVisible(self, displayLine):
        """
        DocLineFromVisible(displayLine) -> int
        
        Find the document line of a display line taking hidden lines into
        account.
        """

    def SetFoldLevel(self, line, level):
        """
        SetFoldLevel(line, level)
        
        Set the fold level of a line.
        """

    def GetFoldLevel(self, line):
        """
        GetFoldLevel(line) -> int
        
        Retrieve the fold level of a line.
        """

    def GetLastChild(self, line, level):
        """
        GetLastChild(line, level) -> int
        
        Find the last child line of a header line.
        """

    def GetFoldParent(self, line):
        """
        GetFoldParent(line) -> int
        
        Find the parent line of a child line.
        """

    def ShowLines(self, lineStart, lineEnd):
        """
        ShowLines(lineStart, lineEnd)
        
        Make a range of lines visible.
        """

    def HideLines(self, lineStart, lineEnd):
        """
        HideLines(lineStart, lineEnd)
        
        Make a range of lines invisible.
        """

    def GetLineVisible(self, line):
        """
        GetLineVisible(line) -> bool
        
        Is a line visible?
        """

    def GetAllLinesVisible(self):
        """
        GetAllLinesVisible() -> bool
        
        Are all lines visible?
        """

    def SetFoldExpanded(self, line, expanded):
        """
        SetFoldExpanded(line, expanded)
        
        Show the children of a header line.
        """

    def GetFoldExpanded(self, line):
        """
        GetFoldExpanded(line) -> bool
        
        Is a header line expanded?
        """

    def ToggleFold(self, line):
        """
        ToggleFold(line)
        
        Switch a header line between expanded and contracted.
        """

    def ToggleFoldShowText(self, line, text):
        """
        ToggleFoldShowText(line, text)
        
        Switch a header line between expanded and contracted and show some
        text after the line.
        """

    def FoldDisplayTextSetStyle(self, style):
        """
        FoldDisplayTextSetStyle(style)
        
        Set the style of fold display text.
        """

    def FoldLine(self, line, action):
        """
        FoldLine(line, action)
        
        Expand or contract a fold header.
        """

    def FoldChildren(self, line, action):
        """
        FoldChildren(line, action)
        
        Expand or contract a fold header and its children.
        """

    def ExpandChildren(self, line, level):
        """
        ExpandChildren(line, level)
        
        Expand a fold header and all children.
        """

    def FoldAll(self, action):
        """
        FoldAll(action)
        
        Expand or contract all fold headers.
        """

    def EnsureVisible(self, line):
        """
        EnsureVisible(line)
        
        Ensure a particular line is visible by expanding any header line
        hiding it.
        """

    def SetAutomaticFold(self, automaticFold):
        """
        SetAutomaticFold(automaticFold)
        
        Set automatic folding behaviours.
        """

    def GetAutomaticFold(self):
        """
        GetAutomaticFold() -> int
        
        Get automatic folding behaviours.
        """

    def SetFoldFlags(self, flags):
        """
        SetFoldFlags(flags)
        
        Set some style options for folding.
        """

    def EnsureVisibleEnforcePolicy(self, line):
        """
        EnsureVisibleEnforcePolicy(line)
        
        Ensure a particular line is visible by expanding any header line
        hiding it.
        """

    def ContractedFoldNext(self, lineStart):
        """
        ContractedFoldNext(lineStart) -> int
        
        Find the next line at or after lineStart that is a contracted fold
        header line.
        """

    def WrapCount(self, docLine):
        """
        WrapCount(docLine) -> int
        
        The number of display lines needed to wrap a document line.
        """

    def SetWrapMode(self, wrapMode):
        """
        SetWrapMode(wrapMode)
        
        Sets whether text is word wrapped.
        """

    def GetWrapMode(self):
        """
        GetWrapMode() -> int
        
        Retrieve whether text is word wrapped.
        """

    def SetWrapVisualFlags(self, wrapVisualFlags):
        """
        SetWrapVisualFlags(wrapVisualFlags)
        
        Set the display mode of visual flags for wrapped lines.
        """

    def GetWrapVisualFlags(self):
        """
        GetWrapVisualFlags() -> int
        
        Retrieve the display mode of visual flags for wrapped lines.
        """

    def SetWrapVisualFlagsLocation(self, wrapVisualFlagsLocation):
        """
        SetWrapVisualFlagsLocation(wrapVisualFlagsLocation)
        
        Set the location of visual flags for wrapped lines.
        """

    def GetWrapVisualFlagsLocation(self):
        """
        GetWrapVisualFlagsLocation() -> int
        
        Retrieve the location of visual flags for wrapped lines.
        """

    def SetWrapStartIndent(self, indent):
        """
        SetWrapStartIndent(indent)
        
        Set the start indent for wrapped lines.
        """

    def GetWrapStartIndent(self):
        """
        GetWrapStartIndent() -> int
        
        Retrieve the start indent for wrapped lines.
        """

    def SetWrapIndentMode(self, wrapIndentMode):
        """
        SetWrapIndentMode(wrapIndentMode)
        
        Sets how wrapped sublines are placed.
        """

    def GetWrapIndentMode(self):
        """
        GetWrapIndentMode() -> int
        
        Retrieve how wrapped sublines are placed.
        """

    def GetLayoutCache(self):
        """
        GetLayoutCache() -> int
        
        Retrieve the degree of caching of layout information.
        """

    def LinesJoin(self):
        """
        LinesJoin()
        
        Join the lines in the target.
        """

    def LinesSplit(self, pixelWidth):
        """
        LinesSplit(pixelWidth)
        
        Split the lines in the target into lines that are less wide than
        pixelWidth where possible.
        """

    def SetPositionCacheSize(self, size):
        """
        SetPositionCacheSize(size)
        
        Set number of entries in position cache.
        """

    def GetPositionCacheSize(self):
        """
        GetPositionCacheSize() -> int
        
        How many entries are allocated to the position cache?
        """

    def ZoomIn(self):
        """
        ZoomIn()
        
        Magnify the displayed text by increasing the sizes by 1 point.
        """

    def ZoomOut(self):
        """
        ZoomOut()
        
        Make the displayed text smaller by decreasing the sizes by 1 point.
        """

    def SetZoom(self, zoomInPoints):
        """
        SetZoom(zoomInPoints)
        
        Set the zoom level.
        """

    def GetZoom(self):
        """
        GetZoom() -> int
        
        Retrieve the zoom level.
        """

    def GetEdgeColumn(self):
        """
        GetEdgeColumn() -> int
        
        Retrieve the column number which text should be kept within.
        """

    def SetEdgeColumn(self, column):
        """
        SetEdgeColumn(column)
        
        Set the column number of the edge.
        """

    def GetEdgeMode(self):
        """
        GetEdgeMode() -> int
        
        Retrieve the edge highlight mode.
        """

    def SetEdgeMode(self, edgeMode):
        """
        SetEdgeMode(edgeMode)
        
        The edge may be displayed by a line
        (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that
        goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all
        (wxSTC_EDGE_NONE).
        """

    def GetEdgeColour(self):
        """
        GetEdgeColour() -> Colour
        
        Retrieve the colour used in edge indication.
        """

    def SetEdgeColour(self, edgeColour):
        """
        SetEdgeColour(edgeColour)
        
        Change the colour used in edge indication.
        """

    def MultiEdgeAddLine(self, column, edgeColour):
        """
        MultiEdgeAddLine(column, edgeColour)
        
        Add a new vertical edge to the view.
        """

    def MultiEdgeClearAll(self):
        """
        MultiEdgeClearAll()
        
        Clear all vertical edges.
        """

    def ChangeLexerState(self, start, end):
        """
        ChangeLexerState(start, end) -> int
        
        Indicate that the internal state of a lexer has changed over a range
        and therefore there may be a need to redraw.
        """

    def SetLexer(self, lexer):
        """
        SetLexer(lexer)
        
        Set the lexing language of the document.
        """

    def GetLexer(self):
        """
        GetLexer() -> int
        
        Retrieve the lexing language of the document.
        """

    def Colourise(self, start, end):
        """
        Colourise(start, end)
        
        Colourise a segment of the document using the current lexing language.
        """

    def SetProperty(self, key, value):
        """
        SetProperty(key, value)
        
        Set up a value that may be used by a lexer for some optional feature.
        """

    def SetKeyWords(self, keyWordSet, keyWords):
        """
        SetKeyWords(keyWordSet, keyWords)
        
        Set up the key words used by the lexer.
        """

    def SetLexerLanguage(self, language):
        """
        SetLexerLanguage(language)
        
        Set the lexing language of the document based on string name.
        """

    def LoadLexerLibrary(self, path):
        """
        LoadLexerLibrary(path)
        
        Load a lexer library (dll / so).
        """

    def GetProperty(self, key):
        """
        GetProperty(key) -> String
        
        Retrieve a "property" value previously set with SetProperty.
        """

    def GetPropertyExpanded(self, key):
        """
        GetPropertyExpanded(key) -> String
        
        Retrieve a "property" value previously set with SetProperty, with
        "$()" variable replacement on returned buffer.
        """

    def GetPropertyInt(self, key, defaultValue=0):
        """
        GetPropertyInt(key, defaultValue=0) -> int
        
        Retrieve a "property" value previously set with SetProperty,
        interpreted as an int AFTER any "$()" variable replacement.
        """

    def GetLexerLanguage(self):
        """
        GetLexerLanguage() -> String
        
        Retrieve the lexing language of the document.
        """

    def PrivateLexerCall(self, operation, pointer):
        """
        PrivateLexerCall(operation, pointer) -> void
        
        For private communication between an application and a known lexer.
        """

    def PropertyNames(self):
        """
        PropertyNames() -> String
        
        Retrieve a '\n' separated list of properties understood by the current
        lexer.
        """

    def PropertyType(self, name):
        """
        PropertyType(name) -> int
        
        Retrieve the type of a property.
        """

    def DescribeProperty(self, name):
        """
        DescribeProperty(name) -> String
        
        Describe a property.
        """

    def DescribeKeyWordSets(self):
        """
        DescribeKeyWordSets() -> String
        
        Retrieve a '\n' separated list of descriptions of the keyword sets
        understood by the current lexer.
        """

    def AllocateSubStyles(self, styleBase, numberStyles):
        """
        AllocateSubStyles(styleBase, numberStyles) -> int
        
        Allocate a set of sub styles for a particular base style, returning
        start of range.
        """

    def GetSubStylesStart(self, styleBase):
        """
        GetSubStylesStart(styleBase) -> int
        
        The starting style number for the sub styles associated with a base
        style.
        """

    def GetSubStylesLength(self, styleBase):
        """
        GetSubStylesLength(styleBase) -> int
        
        The number of sub styles associated with a base style.
        """

    def GetStyleFromSubStyle(self, subStyle):
        """
        GetStyleFromSubStyle(subStyle) -> int
        
        For a sub style, return the base style, else return the argument.
        """

    def GetPrimaryStyleFromStyle(self, style):
        """
        GetPrimaryStyleFromStyle(style) -> int
        
        For a secondary style, return the primary style, else return the
        argument.
        """

    def FreeSubStyles(self):
        """
        FreeSubStyles()
        
        Free allocated sub styles.
        """

    def SetIdentifiers(self, style, identifiers):
        """
        SetIdentifiers(style, identifiers)
        
        Set the identifiers that are shown in a particular style.
        """

    def DistanceToSecondaryStyles(self):
        """
        DistanceToSecondaryStyles() -> int
        
        Where styles are duplicated by a feature such as active/inactive code
        return the distance between the two types.
        """

    def GetSubStyleBases(self):
        """
        GetSubStyleBases() -> String
        
        Get the set of base styles that can be extended with sub styles.
        """

    def SetMouseDwellTime(self, periodMilliseconds):
        """
        SetMouseDwellTime(periodMilliseconds)
        
        Sets the time the mouse must sit still to generate a mouse dwell
        event.
        """

    def GetMouseDwellTime(self):
        """
        GetMouseDwellTime() -> int
        
        Retrieve the time the mouse must sit still to generate a mouse dwell
        event.
        """

    def SetModEventMask(self, eventMask):
        """
        SetModEventMask(eventMask)
        
        Set which document modification events are sent to the container.
        """

    def GetModEventMask(self):
        """
        GetModEventMask() -> int
        
        Get which document modification events are sent to the container.
        """

    def SetIdentifier(self, identifier):
        """
        SetIdentifier(identifier)
        
        Set the identifier reported as idFrom in notification messages.
        """

    def GetIdentifier(self):
        """
        GetIdentifier() -> int
        
        Get the identifier.
        """

    def SetStyleBits(self, bits):
        """
        SetStyleBits(bits)
        
        Divide each styling byte into lexical class bits (default: 5) and
        indicator bits (default: 3).
        """

    def GetStyleBits(self):
        """
        GetStyleBits() -> int
        
        Retrieve number of bits in style bytes used to hold the lexical state.
        """

    def GetStyleBitsNeeded(self):
        """
        GetStyleBitsNeeded() -> int
        
        Retrieve the number of bits the current lexer needs for styling.
        """

    def GetCurrentLine(self):
        """
        GetCurrentLine() -> int
        
        Returns the line number of the line with the caret.
        """

    def StyleSetSpec(self, styleNum, spec):
        """
        StyleSetSpec(styleNum, spec)
        
        Extract style settings from a spec-string which is composed of one or
        more of the following comma separated elements:
        """

    def StyleGetFont(self, style):
        """
        StyleGetFont(style) -> Font
        
        Get the font of a style.
        """

    def StyleSetFont(self, styleNum, font):
        """
        StyleSetFont(styleNum, font)
        
        Set style size, face, bold, italic, and underline attributes from a
        wxFont's attributes.
        """

    def StyleSetFontAttr(self, styleNum, size, faceName, bold, italic, underline, encoding=FONTENCODING_DEFAULT):
        """
        StyleSetFontAttr(styleNum, size, faceName, bold, italic, underline, encoding=FONTENCODING_DEFAULT)
        
        Set all font style attributes at once.
        """

    def StyleSetFontEncoding(self, style, encoding):
        """
        StyleSetFontEncoding(style, encoding)
        
        Set the font encoding to be used by a style.
        """

    def CmdKeyExecute(self, cmd):
        """
        CmdKeyExecute(cmd)
        
        Perform one of the operations defined by the wxSTC_CMD_* constants.
        """

    def SetMargins(self, left, right):
        """
        SetMargins(left, right)
        
        Set the left and right margin in the edit area, measured in pixels.
        """

    def ScrollToLine(self, line):
        """
        ScrollToLine(line)
        
        Scroll enough to make the given line visible.
        """

    def ScrollToColumn(self, column):
        """
        ScrollToColumn(column)
        
        Scroll enough to make the given column visible.
        """

    def SendMsg(self, msg, wp=0, lp=0):
        """
        SendMsg(msg, wp=0, lp=0) -> IntPtr
        
        Scintilla API call.
        """

    def SetVScrollBar(self, bar):
        """
        SetVScrollBar(bar)
        
        Set the vertical scrollbar to use instead of the one that's built-in.
        """

    def SetHScrollBar(self, bar):
        """
        SetHScrollBar(bar)
        
        Set the horizontal scrollbar to use instead of the one that's built-
        in.
        """

    def GetLastKeydownProcessed(self):
        """
        GetLastKeydownProcessed() -> bool
        
        Can be used to prevent the EVT_CHAR handler from adding the char.
        """

    def SetLastKeydownProcessed(self, val):
        """
        SetLastKeydownProcessed(val)
        
        Returns the line number of the line with the caret.
        """

    def SaveFile(self, filename):
        """
        SaveFile(filename) -> bool
        
        Write the contents of the editor to filename.
        """

    def LoadFile(self, filename):
        """
        LoadFile(filename) -> bool
        
        Load the contents of filename into the editor.
        """

    def DoDragEnter(self, x, y, defaultRes):
        """
        DoDragEnter(x, y, defaultRes) -> DragResult
        
        Allow for simulating a DnD DragEnter.
        """

    def DoDragOver(self, x, y, defaultRes):
        """
        DoDragOver(x, y, defaultRes) -> DragResult
        
        Allow for simulating a DnD DragOver.
        """

    def DoDragLeave(self):
        """
        DoDragLeave()
        
        Allow for simulating a DnD DragLeave.
        """

    def DoDropText(self, x, y, data):
        """
        DoDropText(x, y, data) -> bool
        
        Allow for simulating a DnD DropText.
        """

    def SetUseAntiAliasing(self, useAA):
        """
        SetUseAntiAliasing(useAA)
        
        Specify whether anti-aliased fonts should be used.
        """

    def GetUseAntiAliasing(self):
        """
        GetUseAntiAliasing() -> bool
        
        Returns the current UseAntiAliasing setting.
        """

    def AnnotationClearLine(self, line):
        """
        AnnotationClearLine(line)
        
        Clear annotations from the given line.
        """

    def MarkerDefineBitmap(self, markerNumber, bmp):
        """
        MarkerDefineBitmap(markerNumber, bmp)
        
        Define a marker with a wxBitmap.
        """

    def AddTextRaw(self, text, length=-1):
        """
        AddTextRaw(text, length=-1)
        
        Add text to the document at current position.
        """

    def InsertTextRaw(self, pos, text):
        """
        InsertTextRaw(pos, text)
        
        Insert string at a position.
        """

    def GetCurLineRaw(self):
        """
        GetCurLineRaw() -> (CharBuffer, linePos)
        
        Retrieve the text of the line containing the caret.
        """

    def GetLineRaw(self, line):
        """
        GetLineRaw(line) -> CharBuffer
        
        Retrieve the contents of a line.
        """

    def GetSelectedTextRaw(self):
        """
        GetSelectedTextRaw() -> CharBuffer
        
        Retrieve the selected text.
        """

    def GetTargetTextRaw(self):
        """
        GetTargetTextRaw() -> CharBuffer
        
        Retrieve the target text.
        """

    def GetTextRangeRaw(self, startPos, endPos):
        """
        GetTextRangeRaw(startPos, endPos) -> CharBuffer
        
        Retrieve a range of text.
        """

    def SetTextRaw(self, text):
        """
        SetTextRaw(text)
        
        Replace the contents of the document with the argument text.
        """

    def GetTextRaw(self):
        """
        GetTextRaw() -> CharBuffer
        
        Retrieve all the text in the document.
        """

    def AppendTextRaw(self, text, length=-1):
        """
        AppendTextRaw(text, length=-1)
        
        Append a string to the end of the document without changing the
        selection.
        """

    def ReplaceSelectionRaw(self, text):
        """
        ReplaceSelectionRaw(text)
        
        Replace the current selection with text.
        """

    def ReplaceTargetRaw(self, text, length=-1):
        """
        ReplaceTargetRaw(text, length=-1) -> int
        
        Replace the current target with text.
        """

    def ReplaceTargetRERaw(self, text, length=-1):
        """
        ReplaceTargetRERaw(text, length=-1) -> int
        
        Replace the current target with text using regular expressions.
        """

    def WriteText(self, text):
        """
        WriteText(text)
        
        Writes the text into the text control at the current insertion
        position.
        """

    def Remove(self, from_, to_):
        """
        Remove(from_, to_)
        
        Removes the text starting at the first given position up to (but not
        including) the character at the last position.
        """

    def Replace(self, from_, to_, value):
        """
        Replace(from_, to_, value)
        
        Replaces the text starting at the first position up to (but not
        including) the character at the last position with the given text.
        """

    def SetInsertionPoint(self, pos):
        """
        SetInsertionPoint(pos)
        
        Sets the insertion point at the given position.
        """

    def GetInsertionPoint(self):
        """
        GetInsertionPoint() -> long
        
        Returns the insertion point, or cursor, position.
        """

    def GetLastPosition(self):
        """
        GetLastPosition() -> long
        
        Returns the zero based index of the last position in the text control,
        which is equal to the number of characters in the control.
        """

    def SetSelection(self, from_, to_):
        """
        SetSelection(from_, to_)
        
        Selects the text starting at the first position up to (but not
        including) the character at the last position.
        """

    def SelectNone(self):
        """
        SelectNone()
        
        Deselects selected text in the control.
        """

    def GetSelection(self):
        """
        GetSelection() -> (from_, to_)
        
        Gets the current selection span.
        """

    def IsEditable(self):
        """
        IsEditable() -> bool
        
        Returns true if the controls contents may be edited by user (note that
        it always can be changed by the program).
        """

    def SetEditable(self, editable):
        """
        SetEditable(editable)
        
        Makes the text item editable or read-only, overriding the
        wxTE_READONLY flag.
        """

    def GetLineLength(self, lineNo):
        """
        GetLineLength(lineNo) -> int
        
        Gets the length of the specified line, not including any trailing
        newline character(s).
        """

    def GetLineText(self, lineNo):
        """
        GetLineText(lineNo) -> String
        
        Returns the contents of a given line in the text control, not
        including any trailing newline character(s).
        """

    def GetNumberOfLines(self):
        """
        GetNumberOfLines() -> int
        
        Returns the number of lines in the text control buffer.
        """

    def IsModified(self):
        """
        IsModified() -> bool
        
        Returns true if the text has been modified by user.
        """

    def MarkDirty(self):
        """
        MarkDirty()
        
        Mark text as modified (dirty).
        """

    def DiscardEdits(self):
        """
        DiscardEdits()
        
        Resets the internal modified flag as if the current changes had been
        saved.
        """

    def SetStyle(self, start, end, style):
        """
        SetStyle(start, end, style) -> bool
        
        This method is inherited from wxTextAreaBase but is not implemented in
        wxStyledTextCtrl.
        """

    def GetStyle(self, position, style):
        """
        GetStyle(position, style) -> bool
        
        This method is inherited from wxTextAreaBase but is not implemented in
        wxStyledTextCtrl.
        """

    def SetDefaultStyle(self, style):
        """
        SetDefaultStyle(style) -> bool
        
        This method is inherited from wxTextAreaBase but is not implemented in
        wxStyledTextCtrl.
        """

    def XYToPosition(self, x, y):
        """
        XYToPosition(x, y) -> long
        
        Converts the given zero based column and line number to a position.
        """

    def PositionToXY(self, pos):
        """
        PositionToXY(pos) -> (bool, x, y)
        
        Converts given position to a zero-based column, line number pair.
        """

    def ShowPosition(self, pos):
        """
        ShowPosition(pos)
        
        Makes the line containing the given position visible.
        """

    def HitTestPos(self, pt):
        """
        HitTestPos(pt) -> (TextCtrlHitTestResult, pos)
        
        Finds the position of the character at the specified point.
        """

    def HitTest(self, pt):
        """
        HitTest(pt) -> (TextCtrlHitTestResult, col, row)
        
        Finds the row and column of the character at the specified point.
        """

    @staticmethod
    def GetLibraryVersionInfo():
        """
        GetLibraryVersionInfo() -> VersionInfo
        
        Returns the version of the Scintilla library used by this control.
        """

    @staticmethod
    def GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL):
        """
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
        """

    def AutoComplete(self, *args, **kw):
        """
        AutoComplete(choices) -> bool
        AutoComplete(completer) -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using the given choices.
        """

    def AutoCompleteFileNames(self):
        """
        AutoCompleteFileNames() -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using all valid file system paths.
        """

    def AutoCompleteDirectories(self):
        """
        AutoCompleteDirectories() -> bool
        
        Call this function to enable auto-completion of the text using the
        file system directories.
        """

    def CanCopy(self):
        """
        CanCopy() -> bool
        
        Returns true if the selection can be copied to the clipboard.
        """

    def CanCut(self):
        """
        CanCut() -> bool
        
        Returns true if the selection can be cut to the clipboard.
        """

    def ChangeValue(self, value):
        """
        ChangeValue(value)
        
        Sets the new text control value.
        """

    def ForceUpper(self):
        """
        ForceUpper()
        
        Convert all text entered into the control to upper case.
        """

    def GetRange(self, from_, to_):
        """
        GetRange(from_, to_) -> String
        
        Returns the string containing the text starting in the positions from
        and up to to in the control.
        """

    def GetStringSelection(self):
        """
        GetStringSelection() -> String
        
        Gets the text currently selected in the control.
        """

    def GetValue(self):
        """
        GetValue() -> String
        
        Gets the contents of the control.
        """

    def IsEmpty(self):
        """
        IsEmpty() -> bool
        
        Returns true if the control is currently empty.
        """

    def SetInsertionPointEnd(self):
        """
        SetInsertionPointEnd()
        
        Sets the insertion point at the end of the text control.
        """

    def SetMaxLength(self, len):
        """
        SetMaxLength(len)
        
        This function sets the maximum number of characters the user can enter
        into the control.
        """

    def SetHint(self, hint):
        """
        SetHint(hint) -> bool
        
        Sets a hint shown in an empty unfocused text control.
        """

    def GetHint(self):
        """
        GetHint() -> String
        
        Returns the current hint string.
        """

    def GetMargins(self):
        """
        GetMargins() -> Point
        
        Returns the margins used by the control.
        """

    def SetValue(self, value):
        """
        SetValue(value)
        
        Sets the new text control value.
        """

    def GetDefaultStyle(self):
        """
        GetDefaultStyle() -> TextAttr
        
        Returns the style currently used for the new text.
        """

    def PositionToCoords(self, pos):
        """
        PositionToCoords(pos) -> Point
        
        Converts given text position to client coordinates in pixels.
        """

    def SetModified(self, modified):
        """
        SetModified(modified)
        
        Marks the control as being modified by the user or not.
        """

    def write(self, text):
        """
        write(text)
        
        Append text to the textctrl, for file-like compatibility.
        """

    def flush(self):
        """
        flush()
        
        NOP, for file-like compatibility.
        """
    AdditionalCaretForeground = property(None, None)
    AdditionalCaretsBlink = property(None, None)
    AdditionalCaretsVisible = property(None, None)
    AdditionalSelAlpha = property(None, None)
    AdditionalSelectionTyping = property(None, None)
    AllLinesVisible = property(None, None)
    Anchor = property(None, None)
    AutomaticFold = property(None, None)
    BackSpaceUnIndents = property(None, None)
    BufferedDraw = property(None, None)
    CaretForeground = property(None, None)
    CaretLineBackAlpha = property(None, None)
    CaretLineBackground = property(None, None)
    CaretLineVisible = property(None, None)
    CaretLineVisibleAlways = property(None, None)
    CaretPeriod = property(None, None)
    CaretSticky = property(None, None)
    CaretStyle = property(None, None)
    CaretWidth = property(None, None)
    CharacterPointer = property(None, None)
    CodePage = property(None, None)
    ControlCharSymbol = property(None, None)
    CurLine = property(None, None)
    CurLineRaw = property(None, None)
    CurrentLine = property(None, None)
    CurrentPos = property(None, None)
    DefaultStyle = property(None, None)
    DirectFunction = property(None, None)
    DirectPointer = property(None, None)
    DocPointer = property(None, None)
    EOLMode = property(None, None)
    EdgeColour = property(None, None)
    EdgeColumn = property(None, None)
    EdgeMode = property(None, None)
    EndAtLastLine = property(None, None)
    EndStyled = property(None, None)
    ExtraAscent = property(None, None)
    ExtraDescent = property(None, None)
    FirstVisibleLine = property(None, None)
    FontQuality = property(None, None)
    GapPosition = property(None, None)
    HighlightGuide = property(None, None)
    Hint = property(None, None)
    HotspotActiveBackground = property(None, None)
    HotspotActiveForeground = property(None, None)
    HotspotActiveUnderline = property(None, None)
    HotspotSingleLine = property(None, None)
    IMEInteraction = property(None, None)
    Identifier = property(None, None)
    IdleStyling = property(None, None)
    Indent = property(None, None)
    IndentationGuides = property(None, None)
    IndicatorCurrent = property(None, None)
    IndicatorValue = property(None, None)
    InsertionPoint = property(None, None)
    LastKeydownProcessed = property(None, None)
    LastPosition = property(None, None)
    LayoutCache = property(None, None)
    Length = property(None, None)
    Lexer = property(None, None)
    LexerLanguage = property(None, None)
    LineCount = property(None, None)
    LineEndTypesActive = property(None, None)
    LineEndTypesAllowed = property(None, None)
    LineEndTypesSupported = property(None, None)
    MainSelection = property(None, None)
    MarginCount = property(None, None)
    MarginLeft = property(None, None)
    MarginOptions = property(None, None)
    MarginRight = property(None, None)
    Margins = property(None, None)
    MaxLineState = property(None, None)
    ModEventMask = property(None, None)
    Modify = property(None, None)
    MouseDownCaptures = property(None, None)
    MouseDwellTime = property(None, None)
    MouseSelectionRectangularSwitch = property(None, None)
    MouseWheelCaptures = property(None, None)
    MultiPaste = property(None, None)
    MultipleSelection = property(None, None)
    NumberOfLines = property(None, None)
    Overtype = property(None, None)
    PasteConvertEndings = property(None, None)
    PhasesDraw = property(None, None)
    PositionCacheSize = property(None, None)
    PrintColourMode = property(None, None)
    PrintMagnification = property(None, None)
    PrintWrapMode = property(None, None)
    PunctuationChars = property(None, None)
    RangePointer = property(None, None)
    ReadOnly = property(None, None)
    RectangularSelectionAnchor = property(None, None)
    RectangularSelectionAnchorVirtualSpace = property(None, None)
    RectangularSelectionCaret = property(None, None)
    RectangularSelectionCaretVirtualSpace = property(None, None)
    RectangularSelectionModifier = property(None, None)
    STCCursor = property(None, None)
    STCFocus = property(None, None)
    ScrollWidth = property(None, None)
    ScrollWidthTracking = property(None, None)
    SearchFlags = property(None, None)
    SelAlpha = property(None, None)
    SelEOLFilled = property(None, None)
    SelectedText = property(None, None)
    SelectedTextRaw = property(None, None)
    SelectionEmpty = property(None, None)
    SelectionEnd = property(None, None)
    SelectionMode = property(None, None)
    SelectionStart = property(None, None)
    Selections = property(None, None)
    Status = property(None, None)
    StringSelection = property(None, None)
    StyleBits = property(None, None)
    StyleBitsNeeded = property(None, None)
    SubStyleBases = property(None, None)
    TabDrawMode = property(None, None)
    TabIndents = property(None, None)
    TabWidth = property(None, None)
    TargetEnd = property(None, None)
    TargetStart = property(None, None)
    TargetText = property(None, None)
    TargetTextRaw = property(None, None)
    Technology = property(None, None)
    Text = property(None, None)
    TextLength = property(None, None)
    TextRaw = property(None, None)
    TwoPhaseDraw = property(None, None)
    UndoCollection = property(None, None)
    UseAntiAliasing = property(None, None)
    UseHorizontalScrollBar = property(None, None)
    UseTabs = property(None, None)
    UseVerticalScrollBar = property(None, None)
    Value = property(None, None)
    ViewEOL = property(None, None)
    ViewWhiteSpace = property(None, None)
    VirtualSpaceOptions = property(None, None)
    WhitespaceChars = property(None, None)
    WhitespaceSize = property(None, None)
    WordChars = property(None, None)
    WrapIndentMode = property(None, None)
    WrapMode = property(None, None)
    WrapStartIndent = property(None, None)
    WrapVisualFlags = property(None, None)
    WrapVisualFlagsLocation = property(None, None)
    XOffset = property(None, None)
    Zoom = property(None, None)
# end of class StyledTextCtrl


class StyledTextEvent(CommandEvent):
    """
    StyledTextEvent(commandType=0, id=0)
    StyledTextEvent(event)
    
    The type of events sent from wxStyledTextCtrl.
    """

    def __init__(self, *args, **kw):
        """
        StyledTextEvent(commandType=0, id=0)
        StyledTextEvent(event)
        
        The type of events sent from wxStyledTextCtrl.
        """

    def GetAlt(self):
        """
        GetAlt() -> bool
        
        Returns true if the Alt key is pressed.
        """

    def GetAnnotationsLinesAdded(self):
        """
        GetAnnotationsLinesAdded() -> int
        
        Returns the number of lines that have been added to or removed from an
        annotation.
        """

    def GetControl(self):
        """
        GetControl() -> bool
        
        Returns true if the Control key is pressed.
        """

    def GetDragFlags(self):
        """
        GetDragFlags() -> int
        
        Returns flags for the drag operation associated with this event.
        """

    def GetDragResult(self):
        """
        GetDragResult() -> DragResult
        
        Returns drag result for this event.
        """

    def GetDragText(self):
        """
        GetDragText() -> String
        """

    def GetFoldLevelNow(self):
        """
        GetFoldLevelNow() -> int
        
        Returns the current fold level for the line.
        """

    def GetFoldLevelPrev(self):
        """
        GetFoldLevelPrev() -> int
        
        Returns previous fold level for the line.
        """

    def GetKey(self):
        """
        GetKey() -> int
        
        Returns the key code of the key that generated this event.
        """

    def GetLength(self):
        """
        GetLength() -> int
        
        Returns the length (number of characters) of this event.
        """

    def GetLine(self):
        """
        GetLine() -> int
        
        Returns zero-based line number for this event.
        """

    def GetLinesAdded(self):
        """
        GetLinesAdded() -> int
        
        Returns the number of lines added or deleted with this event.
        """

    def GetListCompletionMethod(self):
        """
        GetListCompletionMethod() -> int
        
        Returns a value describing the action that closed the list.
        """

    def GetListType(self):
        """
        GetListType() -> int
        
        Returns the list type for this event.
        """

    def GetLParam(self):
        """
        GetLParam() -> int
        
        Returns the value of the LParam field for this event.
        """

    def GetMargin(self):
        """
        GetMargin() -> int
        
        Returns the zero-based index of the margin that generated this event.
        """

    def GetMessage(self):
        """
        GetMessage() -> int
        
        Returns a message number while a macro is being recorded.
        """

    def GetModificationType(self):
        """
        GetModificationType() -> int
        
        Returns the modification type for this event.
        """

    def GetModifiers(self):
        """
        GetModifiers() -> int
        
        Returns the modifiers of the key press or mouse click for this event.
        """

    def GetPosition(self):
        """
        GetPosition() -> int
        
        Returns the zero-based text position associated this event.
        """

    def GetShift(self):
        """
        GetShift() -> bool
        
        Returns true if the Shift key is pressed.
        """

    def GetText(self):
        """
        GetText() -> String
        """

    def GetToken(self):
        """
        GetToken() -> int
        
        Returns the token value for this event.
        """

    def GetUpdated(self):
        """
        GetUpdated() -> int
        
        Returns the value of the updated field for this event.
        """

    def GetWParam(self):
        """
        GetWParam() -> int
        
        Returns value of the WParam field for this event.
        """

    def GetX(self):
        """
        GetX() -> int
        
        Returns the X coordinate of the mouse for this event.
        """

    def GetY(self):
        """
        GetY() -> int
        
        Returns the Y coordinate of the mouse for this event.
        """

    def SetAnnotationLinesAdded(self, val):
        """
        SetAnnotationLinesAdded(val)
        
        Sets the annotation lines added value for this event.
        """

    def SetDragFlags(self, flags):
        """
        SetDragFlags(flags)
        
        Sets the drag flags for this event.
        """

    def SetDragResult(self, val):
        """
        SetDragResult(val)
        
        Sets the drag result for this event.
        """

    def SetDragText(self, val):
        """
        SetDragText(val)
        
        Sets the drag text for this event.
        """

    def SetFoldLevelNow(self, val):
        """
        SetFoldLevelNow(val)
        
        Sets the current fold level for this event.
        """

    def SetFoldLevelPrev(self, val):
        """
        SetFoldLevelPrev(val)
        
        Sets the previous fold level for this event.
        """

    def SetKey(self, k):
        """
        SetKey(k)
        
        Sets the key code for this event.
        """

    def SetLength(self, len):
        """
        SetLength(len)
        
        Sets the length value for this event.
        """

    def SetLine(self, val):
        """
        SetLine(val)
        
        Sets line number for this event.
        """

    def SetLinesAdded(self, num):
        """
        SetLinesAdded(num)
        
        Sets the number of lines added for this event.
        """

    def SetListCompletionMethod(self, val):
        """
        SetListCompletionMethod(val)
        
        Sets the list completion method for this event.
        """

    def SetListType(self, val):
        """
        SetListType(val)
        
        Sets the list type for this event.
        """

    def SetLParam(self, val):
        """
        SetLParam(val)
        
        Sets value of the LParam field for this event.
        """

    def SetMargin(self, val):
        """
        SetMargin(val)
        
        Sets margin number for this event.
        """

    def SetMessage(self, val):
        """
        SetMessage(val)
        
        Sets message number for this event.
        """

    def SetModificationType(self, t):
        """
        SetModificationType(t)
        
        Sets the modification type for this event.
        """

    def SetModifiers(self, m):
        """
        SetModifiers(m)
        
        Sets the value of the modifiers field for this event.
        """

    def SetPosition(self, pos):
        """
        SetPosition(pos)
        
        Sets file position for this event.
        """

    def SetText(self, t):
        """
        SetText(t)
        
        Sets the text for this event.
        """

    def SetToken(self, val):
        """
        SetToken(val)
        
        Sets the token for this event.
        """

    def SetUpdated(self, val):
        """
        SetUpdated(val)
        
        Sets the value of the updated field for this event.
        """

    def SetWParam(self, val):
        """
        SetWParam(val)
        
        Sets the value of the WParam field for this event.
        """

    def SetX(self, val):
        """
        SetX(val)
        
        Sets the X value for this event.
        """

    def SetY(self, val):
        """
        SetY(val)
        
        Sets the Y value for this event.
        """
    Alt = property(None, None)
    AnnotationsLinesAdded = property(None, None)
    Control = property(None, None)
    DragFlags = property(None, None)
    DragResult = property(None, None)
    DragText = property(None, None)
    FoldLevelNow = property(None, None)
    FoldLevelPrev = property(None, None)
    Key = property(None, None)
    LParam = property(None, None)
    Length = property(None, None)
    Line = property(None, None)
    LinesAdded = property(None, None)
    ListCompletionMethod = property(None, None)
    ListType = property(None, None)
    Margin = property(None, None)
    Message = property(None, None)
    ModificationType = property(None, None)
    Modifiers = property(None, None)
    Position = property(None, None)
    Shift = property(None, None)
    Text = property(None, None)
    Token = property(None, None)
    Updated = property(None, None)
    WParam = property(None, None)
    X = property(None, None)
    Y = property(None, None)
# end of class StyledTextEvent


EVT_STC_CHANGE = wx.PyEventBinder( wxEVT_STC_CHANGE, 1 )
EVT_STC_STYLENEEDED = wx.PyEventBinder( wxEVT_STC_STYLENEEDED, 1 )
EVT_STC_CHARADDED = wx.PyEventBinder( wxEVT_STC_CHARADDED, 1 )
EVT_STC_SAVEPOINTREACHED = wx.PyEventBinder( wxEVT_STC_SAVEPOINTREACHED, 1 )
EVT_STC_SAVEPOINTLEFT = wx.PyEventBinder( wxEVT_STC_SAVEPOINTLEFT, 1 )
EVT_STC_ROMODIFYATTEMPT = wx.PyEventBinder( wxEVT_STC_ROMODIFYATTEMPT, 1 )
EVT_STC_KEY = wx.PyEventBinder( wxEVT_STC_KEY, 1 )
EVT_STC_DOUBLECLICK = wx.PyEventBinder( wxEVT_STC_DOUBLECLICK, 1 )
EVT_STC_UPDATEUI = wx.PyEventBinder( wxEVT_STC_UPDATEUI, 1 )
EVT_STC_MODIFIED = wx.PyEventBinder( wxEVT_STC_MODIFIED, 1 )
EVT_STC_MACRORECORD = wx.PyEventBinder( wxEVT_STC_MACRORECORD, 1 )
EVT_STC_MARGINCLICK = wx.PyEventBinder( wxEVT_STC_MARGINCLICK, 1 )
EVT_STC_NEEDSHOWN = wx.PyEventBinder( wxEVT_STC_NEEDSHOWN, 1 )
EVT_STC_PAINTED = wx.PyEventBinder( wxEVT_STC_PAINTED, 1 )
EVT_STC_USERLISTSELECTION = wx.PyEventBinder( wxEVT_STC_USERLISTSELECTION, 1 )
EVT_STC_URIDROPPED = wx.PyEventBinder( wxEVT_STC_URIDROPPED, 1 )
EVT_STC_DWELLSTART = wx.PyEventBinder( wxEVT_STC_DWELLSTART, 1 )
EVT_STC_DWELLEND = wx.PyEventBinder( wxEVT_STC_DWELLEND, 1 )
EVT_STC_START_DRAG = wx.PyEventBinder( wxEVT_STC_START_DRAG, 1 )
EVT_STC_DRAG_OVER = wx.PyEventBinder( wxEVT_STC_DRAG_OVER, 1 )
EVT_STC_DO_DROP = wx.PyEventBinder( wxEVT_STC_DO_DROP, 1 )
EVT_STC_ZOOM = wx.PyEventBinder( wxEVT_STC_ZOOM, 1 )
EVT_STC_HOTSPOT_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_CLICK, 1 )
EVT_STC_HOTSPOT_DCLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_DCLICK, 1 )
EVT_STC_HOTSPOT_RELEASE_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_RELEASE_CLICK, 1 )
EVT_STC_CALLTIP_CLICK = wx.PyEventBinder( wxEVT_STC_CALLTIP_CLICK, 1 )
EVT_STC_AUTOCOMP_SELECTION = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_SELECTION, 1 )
EVT_STC_INDICATOR_CLICK = wx.PyEventBinder( wxEVT_STC_INDICATOR_CLICK, 1 )
EVT_STC_INDICATOR_RELEASE = wx.PyEventBinder( wxEVT_STC_INDICATOR_RELEASE, 1 )
EVT_STC_AUTOCOMP_CANCELLED = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_CANCELLED, 1 )
EVT_STC_AUTOCOMP_CHAR_DELETED = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_CHAR_DELETED, 1 )
EVT_STC_CLIPBOARD_COPY = wx.PyEventBinder( wxEVT_STC_CLIPBOARD_COPY, 1)
EVT_STC_CLIPBOARD_PASTE = wx.PyEventBinder( wxEVT_STC_CLIPBOARD_PASTE, 1)
EVT_STC_AUTOCOMP_COMPLETED = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_COMPLETED, 1)
EVT_STC_MARGIN_RIGHT_CLICK = wx.PyEventBinder( wxEVT_STC_MARGIN_RIGHT_CLICK, 1)
EVT_STC_AUTOCOMP_SELECTION_CHANGE = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_SELECTION_CHANGE, 1)

# compatibility aliases
STC_SCMOD_NORM = STC_KEYMOD_NORM
STC_SCMOD_SHIFT = STC_KEYMOD_SHIFT
STC_SCMOD_CTRL = STC_KEYMOD_CTRL
STC_SCMOD_ALT = STC_KEYMOD_ALT
STC_SCMOD_SUPER = STC_KEYMOD_SUPER
STC_SCMOD_META = STC_KEYMOD_META
#-- end-_stc --#
